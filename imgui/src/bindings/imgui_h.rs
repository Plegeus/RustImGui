/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const IMGUI_VERSION: &[u8; 11] = b"1.92.0 WIP\0";
pub const IMGUI_VERSION_NUM: u32 = 19199;
pub const _LIBCPP_ABI_VERSION: u32 = 1;
pub const _LIBCPP_HARDENING_MODE_DEFAULT: u32 = 2;
pub const _LIBCPP_OBJECT_FORMAT_MACHO: u32 = 1;
pub const _LIBCPP_STD_VER: u32 = 14;
pub const _LIBCPP_INTRODUCED_IN_LLVM_19: u32 = 0;
pub const _LIBCPP_INTRODUCED_IN_LLVM_18: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_17: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_16: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_15: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_14: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_13: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_12: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_11: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_10: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_9: u32 = 1;
pub const _LIBCPP_INTRODUCED_IN_LLVM_4: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_BAD_OPTIONAL_ACCESS: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_BAD_VARIANT_ACCESS: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_BAD_ANY_CAST: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_FILESYSTEM_LIBRARY: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_SYNC: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_ADDITIONAL_IOSTREAM_EXPLICIT_INSTANTIATIONS_1: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_TO_CHARS_FLOATING_POINT: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_VERBOSE_ABORT: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_PMR: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPTION: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_PRINT: u32 = 1;
pub const _LIBCPP_AVAILABILITY_HAS_TZDB: u32 = 0;
pub const _LIBCPP_AVAILABILITY_HAS_BAD_FUNCTION_CALL_KEY_FUNCTION: u32 = 0;
pub const _LIBCPP_AVAILABILITY_HAS_BAD_EXPECTED_ACCESS_KEY_FUNCTION: u32 = 0;
pub const _LIBCPP_VERSION: u32 = 190102;
pub const _LIBCPP_HARDENING_MODE_NONE: u32 = 2;
pub const _LIBCPP_HARDENING_MODE_FAST: u32 = 4;
pub const _LIBCPP_HARDENING_MODE_EXTENSIVE: u32 = 16;
pub const _LIBCPP_HARDENING_MODE_DEBUG: u32 = 8;
pub const _LIBCPP_HARDENING_MODE: u32 = 2;
pub const _LIBCPP_LOCALE__L_EXTENSIONS: u32 = 1;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __has_bounds_safety_attributes: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_KERNELKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_13_7: u32 = 130700;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_14_6: u32 = 140600;
pub const __MAC_14_7: u32 = 140700;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __MAC_15_2: u32 = 150200;
pub const __MAC_15_3: u32 = 150300;
pub const __MAC_15_4: u32 = 150400;
pub const __MAC_15_5: u32 = 150500;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_17_6: u32 = 170600;
pub const __IPHONE_17_7: u32 = 170700;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __IPHONE_18_2: u32 = 180200;
pub const __IPHONE_18_3: u32 = 180300;
pub const __IPHONE_18_4: u32 = 180400;
pub const __IPHONE_18_5: u32 = 180500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_10_6: u32 = 100600;
pub const __WATCHOS_10_7: u32 = 100700;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __WATCHOS_11_2: u32 = 110200;
pub const __WATCHOS_11_3: u32 = 110300;
pub const __WATCHOS_11_4: u32 = 110400;
pub const __WATCHOS_11_5: u32 = 110500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_17_6: u32 = 170600;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __TVOS_18_2: u32 = 180200;
pub const __TVOS_18_3: u32 = 180300;
pub const __TVOS_18_4: u32 = 180400;
pub const __TVOS_18_5: u32 = 180500;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_8_6: u32 = 80600;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __BRIDGEOS_9_2: u32 = 90200;
pub const __BRIDGEOS_9_3: u32 = 90300;
pub const __BRIDGEOS_9_4: u32 = 90400;
pub const __BRIDGEOS_9_5: u32 = 90500;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_23_6: u32 = 230600;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __DRIVERKIT_24_2: u32 = 240200;
pub const __DRIVERKIT_24_3: u32 = 240300;
pub const __DRIVERKIT_24_4: u32 = 240400;
pub const __DRIVERKIT_24_5: u32 = 240500;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_1_3: u32 = 10300;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const __VISIONOS_2_2: u32 = 20200;
pub const __VISIONOS_2_3: u32 = 20300;
pub const __VISIONOS_2_4: u32 = 20400;
pub const __VISIONOS_2_5: u32 = 20500;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_13_7: u32 = 130700;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_14_6: u32 = 140600;
pub const MAC_OS_VERSION_14_7: u32 = 140700;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const MAC_OS_VERSION_15_2: u32 = 150200;
pub const MAC_OS_VERSION_15_3: u32 = 150300;
pub const MAC_OS_VERSION_15_4: u32 = 150400;
pub const MAC_OS_VERSION_15_5: u32 = 150500;
pub const __AVAILABILITY_VERSIONS_VERSION_HASH: u32 = 93585900;
pub const __AVAILABILITY_VERSIONS_VERSION_STRING: &[u8; 6] = b"Local\0";
pub const __AVAILABILITY_FILE: &[u8; 23] = b"AvailabilityVersions.h\0";
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_IGNORE: u32 = 2;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const IMGUI_PAYLOAD_TYPE_COLOR_3F: &[u8; 7] = b"_COL3F\0";
pub const IMGUI_PAYLOAD_TYPE_COLOR_4F: &[u8; 7] = b"_COL4F\0";
pub const IM_UNICODE_CODEPOINT_INVALID: u32 = 65533;
pub const IM_UNICODE_CODEPOINT_MAX: u32 = 65535;
pub const IM_COL32_R_SHIFT: u32 = 0;
pub const IM_COL32_G_SHIFT: u32 = 8;
pub const IM_COL32_B_SHIFT: u32 = 16;
pub const IM_COL32_A_SHIFT: u32 = 24;
pub const IM_COL32_A_MASK: u32 = 4278190080;
pub const IM_DRAWLIST_TEX_LINES_WIDTH_MAX: u32 = 32;
pub const ImFontAtlasRectId_Invalid: i32 = -1;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type max_align_t = f64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        __len: isize,
    );
}
unsafe extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
unsafe extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64_v2 {
    pub __far: __uint64_t,
    pub __esr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64_v2"]
        [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64_v2"]
        [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_sme_state {
    pub __svcr: __uint64_t,
    pub __tpidr2_el0: __uint64_t,
    pub __svl_b: __uint16_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_sme_state"][::std::mem::size_of::<__darwin_arm_sme_state>() - 24usize];
    ["Alignment of __darwin_arm_sme_state"]
        [::std::mem::align_of::<__darwin_arm_sme_state>() - 8usize];
    ["Offset of field: __darwin_arm_sme_state::__svcr"]
        [::std::mem::offset_of!(__darwin_arm_sme_state, __svcr) - 0usize];
    ["Offset of field: __darwin_arm_sme_state::__tpidr2_el0"]
        [::std::mem::offset_of!(__darwin_arm_sme_state, __tpidr2_el0) - 8usize];
    ["Offset of field: __darwin_arm_sme_state::__svl_b"]
        [::std::mem::offset_of!(__darwin_arm_sme_state, __svl_b) - 16usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_sve_z_state {
    pub __z: [[::std::os::raw::c_char; 256usize]; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_sve_z_state"]
        [::std::mem::size_of::<__darwin_arm_sve_z_state>() - 4096usize];
    ["Alignment of __darwin_arm_sve_z_state"]
        [::std::mem::align_of::<__darwin_arm_sve_z_state>() - 4usize];
    ["Offset of field: __darwin_arm_sve_z_state::__z"]
        [::std::mem::offset_of!(__darwin_arm_sve_z_state, __z) - 0usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_sve_p_state {
    pub __p: [[::std::os::raw::c_char; 32usize]; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_sve_p_state"]
        [::std::mem::size_of::<__darwin_arm_sve_p_state>() - 512usize];
    ["Alignment of __darwin_arm_sve_p_state"]
        [::std::mem::align_of::<__darwin_arm_sve_p_state>() - 4usize];
    ["Offset of field: __darwin_arm_sve_p_state::__p"]
        [::std::mem::offset_of!(__darwin_arm_sve_p_state, __p) - 0usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_sme_za_state {
    pub __za: [::std::os::raw::c_char; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_sme_za_state"]
        [::std::mem::size_of::<__darwin_arm_sme_za_state>() - 4096usize];
    ["Alignment of __darwin_arm_sme_za_state"]
        [::std::mem::align_of::<__darwin_arm_sme_za_state>() - 4usize];
    ["Offset of field: __darwin_arm_sme_za_state::__za"]
        [::std::mem::offset_of!(__darwin_arm_sme_za_state, __za) - 0usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_sme2_state {
    pub __zt0: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_sme2_state"][::std::mem::size_of::<__darwin_arm_sme2_state>() - 64usize];
    ["Alignment of __darwin_arm_sme2_state"]
        [::std::mem::align_of::<__darwin_arm_sme2_state>() - 4usize];
    ["Offset of field: __darwin_arm_sme2_state::__zt0"]
        [::std::mem::offset_of!(__darwin_arm_sme2_state, __zt0) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_neural_footprint: u64,
    pub ri_lifetime_max_neural_footprint: u64,
    pub ri_interval_max_neural_footprint: u64,
    pub ri_reserved: [u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_neural_footprint) - 368usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_neural_footprint) - 376usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_neural_footprint) - 384usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 392usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
unsafe extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Termsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Termsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Coredump_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Coredump_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Retcode_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Retcode_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopval_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopval_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
unsafe extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
unsafe extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
unsafe extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
unsafe extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(__count: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut u32, arg2: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut u32,
        arg2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn quick_exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        __size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
unsafe extern "C" {
    pub fn arc4random() -> u32;
}
unsafe extern "C" {
    pub fn arc4random_addrandom(
        arg1: *mut ::std::os::raw::c_uchar,
        __datlen: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
unsafe extern "C" {
    pub fn arc4random_stir();
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
unsafe extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getloadavg(arg1: *mut f64, __nelem: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sranddev();
}
unsafe extern "C" {
    pub fn srandomdev();
}
unsafe extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontLoader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext {
    _unused: [u8; 0],
}
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiMultiSelectFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImGuiSelectionUserData = ImS64;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec2"][::std::mem::size_of::<ImVec2>() - 8usize];
    ["Alignment of ImVec2"][::std::mem::align_of::<ImVec2>() - 4usize];
    ["Offset of field: ImVec2::x"][::std::mem::offset_of!(ImVec2, x) - 0usize];
    ["Offset of field: ImVec2::y"][::std::mem::offset_of!(ImVec2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec4"][::std::mem::size_of::<ImVec4>() - 16usize];
    ["Alignment of ImVec4"][::std::mem::align_of::<ImVec4>() - 4usize];
    ["Offset of field: ImVec4::x"][::std::mem::offset_of!(ImVec4, x) - 0usize];
    ["Offset of field: ImVec4::y"][::std::mem::offset_of!(ImVec4, y) - 4usize];
    ["Offset of field: ImVec4::z"][::std::mem::offset_of!(ImVec4, z) - 8usize];
    ["Offset of field: ImVec4::w"][::std::mem::offset_of!(ImVec4, w) - 12usize];
};
pub type ImTextureID = ImU64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImTextureRef {
    pub _TexData: *mut ImTextureData,
    pub _TexID: ImTextureID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImTextureRef"][::std::mem::size_of::<ImTextureRef>() - 16usize];
    ["Alignment of ImTextureRef"][::std::mem::align_of::<ImTextureRef>() - 8usize];
    ["Offset of field: ImTextureRef::_TexData"]
        [::std::mem::offset_of!(ImTextureRef, _TexData) - 0usize];
    ["Offset of field: ImTextureRef::_TexID"]
        [::std::mem::offset_of!(ImTextureRef, _TexID) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13CreateContextEP11ImFontAtlas"]
    pub fn ImGui_CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14DestroyContextEP12ImGuiContext"]
    pub fn ImGui_DestroyContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetCurrentContextEv"]
    pub fn ImGui_GetCurrentContext() -> *mut ImGuiContext;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17SetCurrentContextEP12ImGuiContext"]
    pub fn ImGui_SetCurrentContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5GetIOEv"]
    pub fn ImGui_GetIO() -> *mut ImGuiIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetPlatformIOEv"]
    pub fn ImGui_GetPlatformIO() -> *mut ImGuiPlatformIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8GetStyleEv"]
    pub fn ImGui_GetStyle() -> *mut ImGuiStyle;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8NewFrameEv"]
    pub fn ImGui_NewFrame();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8EndFrameEv"]
    pub fn ImGui_EndFrame();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6RenderEv"]
    pub fn ImGui_Render();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11GetDrawDataEv"]
    pub fn ImGui_GetDrawData() -> *mut ImDrawData;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14ShowDemoWindowEPb"]
    pub fn ImGui_ShowDemoWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17ShowMetricsWindowEPb"]
    pub fn ImGui_ShowMetricsWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18ShowDebugLogWindowEPb"]
    pub fn ImGui_ShowDebugLogWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21ShowIDStackToolWindowEPb"]
    pub fn ImGui_ShowIDStackToolWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15ShowAboutWindowEPb"]
    pub fn ImGui_ShowAboutWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15ShowStyleEditorEP10ImGuiStyle"]
    pub fn ImGui_ShowStyleEditor(ref_: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17ShowStyleSelectorEPKc"]
    pub fn ImGui_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16ShowFontSelectorEPKc"]
    pub fn ImGui_ShowFontSelector(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13ShowUserGuideEv"]
    pub fn ImGui_ShowUserGuide();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10GetVersionEv"]
    pub fn ImGui_GetVersion() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15StyleColorsDarkEP10ImGuiStyle"]
    pub fn ImGui_StyleColorsDark(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16StyleColorsLightEP10ImGuiStyle"]
    pub fn ImGui_StyleColorsLight(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18StyleColorsClassicEP10ImGuiStyle"]
    pub fn ImGui_StyleColorsClassic(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5BeginEPKcPbi"]
    pub fn ImGui_Begin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui3EndEv"]
    pub fn ImGui_End();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BeginChildEPKcRK6ImVec2ii"]
    pub fn ImGui_BeginChild(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BeginChildEjRK6ImVec2ii"]
    pub fn ImGui_BeginChild1(
        id: ImGuiID,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8EndChildEv"]
    pub fn ImGui_EndChild();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17IsWindowAppearingEv"]
    pub fn ImGui_IsWindowAppearing() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17IsWindowCollapsedEv"]
    pub fn ImGui_IsWindowCollapsed() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsWindowFocusedEi"]
    pub fn ImGui_IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsWindowHoveredEi"]
    pub fn ImGui_IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetWindowDrawListEv"]
    pub fn ImGui_GetWindowDrawList() -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetWindowDpiScaleEv"]
    pub fn ImGui_GetWindowDpiScale() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12GetWindowPosEv"]
    pub fn ImGui_GetWindowPos() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetWindowSizeEv"]
    pub fn ImGui_GetWindowSize() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetWindowWidthEv"]
    pub fn ImGui_GetWindowWidth() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetWindowHeightEv"]
    pub fn ImGui_GetWindowHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetWindowViewportEv"]
    pub fn ImGui_GetWindowViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_"]
    pub fn ImGui_SetNextWindowPos(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17SetNextWindowSizeERK6ImVec2i"]
    pub fn ImGui_SetNextWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv"]
    pub fn ImGui_SetNextWindowSizeConstraints(
        size_min: *const ImVec2,
        size_max: *const ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui24SetNextWindowContentSizeERK6ImVec2"]
    pub fn ImGui_SetNextWindowContentSize(size: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui22SetNextWindowCollapsedEbi"]
    pub fn ImGui_SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetNextWindowFocusEv"]
    pub fn ImGui_SetNextWindowFocus();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetNextWindowScrollERK6ImVec2"]
    pub fn ImGui_SetNextWindowScroll(scroll: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20SetNextWindowBgAlphaEf"]
    pub fn ImGui_SetNextWindowBgAlpha(alpha: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21SetNextWindowViewportEj"]
    pub fn ImGui_SetNextWindowViewport(viewport_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SetWindowPosERK6ImVec2i"]
    pub fn ImGui_SetWindowPos(pos: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13SetWindowSizeERK6ImVec2i"]
    pub fn ImGui_SetWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetWindowCollapsedEbi"]
    pub fn ImGui_SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetWindowFocusEv"]
    pub fn ImGui_SetWindowFocus();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SetWindowPosEPKcRK6ImVec2i"]
    pub fn ImGui_SetWindowPos1(
        name: *const ::std::os::raw::c_char,
        pos: *const ImVec2,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i"]
    pub fn ImGui_SetWindowSize1(
        name: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetWindowCollapsedEPKcbi"]
    pub fn ImGui_SetWindowCollapsed1(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetWindowFocusEPKc"]
    pub fn ImGui_SetWindowFocus1(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10GetScrollXEv"]
    pub fn ImGui_GetScrollX() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10GetScrollYEv"]
    pub fn ImGui_GetScrollY() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SetScrollXEf"]
    pub fn ImGui_SetScrollX(scroll_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SetScrollYEf"]
    pub fn ImGui_SetScrollY(scroll_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetScrollMaxXEv"]
    pub fn ImGui_GetScrollMaxX() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetScrollMaxYEv"]
    pub fn ImGui_GetScrollMaxY() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetScrollHereXEf"]
    pub fn ImGui_SetScrollHereX(center_x_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetScrollHereYEf"]
    pub fn ImGui_SetScrollHereY(center_y_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17SetScrollFromPosXEff"]
    pub fn ImGui_SetScrollFromPosX(local_x: f32, center_x_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17SetScrollFromPosYEff"]
    pub fn ImGui_SetScrollFromPosY(local_y: f32, center_y_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8PushFontEP6ImFontf"]
    pub fn ImGui_PushFont(font: *mut ImFont, font_size_base: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7PopFontEv"]
    pub fn ImGui_PopFont();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12PushFontSizeEf"]
    pub fn ImGui_PushFontSize(font_size_base: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11PopFontSizeEv"]
    pub fn ImGui_PopFontSize();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14PushStyleColorEij"]
    pub fn ImGui_PushStyleColor(idx: ImGuiCol, col: ImU32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14PushStyleColorEiRK6ImVec4"]
    pub fn ImGui_PushStyleColor1(idx: ImGuiCol, col: *const ImVec4);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13PopStyleColorEi"]
    pub fn ImGui_PopStyleColor(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12PushStyleVarEif"]
    pub fn ImGui_PushStyleVar(idx: ImGuiStyleVar, val: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12PushStyleVarEiRK6ImVec2"]
    pub fn ImGui_PushStyleVar1(idx: ImGuiStyleVar, val: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13PushStyleVarXEif"]
    pub fn ImGui_PushStyleVarX(idx: ImGuiStyleVar, val_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13PushStyleVarYEif"]
    pub fn ImGui_PushStyleVarY(idx: ImGuiStyleVar, val_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11PopStyleVarEi"]
    pub fn ImGui_PopStyleVar(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12PushItemFlagEib"]
    pub fn ImGui_PushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11PopItemFlagEv"]
    pub fn ImGui_PopItemFlag();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13PushItemWidthEf"]
    pub fn ImGui_PushItemWidth(item_width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12PopItemWidthEv"]
    pub fn ImGui_PopItemWidth();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16SetNextItemWidthEf"]
    pub fn ImGui_SetNextItemWidth(item_width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13CalcItemWidthEv"]
    pub fn ImGui_CalcItemWidth() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15PushTextWrapPosEf"]
    pub fn ImGui_PushTextWrapPos(wrap_local_pos_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14PopTextWrapPosEv"]
    pub fn ImGui_PopTextWrapPos();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7GetFontEv"]
    pub fn ImGui_GetFont() -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11GetFontSizeEv"]
    pub fn ImGui_GetFontSize() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui22GetFontTexUvWhitePixelEv"]
    pub fn ImGui_GetFontTexUvWhitePixel() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12GetFontBakedEv"]
    pub fn ImGui_GetFontBaked() -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11GetColorU32Eif"]
    pub fn ImGui_GetColorU32(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11GetColorU32ERK6ImVec4"]
    pub fn ImGui_GetColorU321(col: *const ImVec4) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11GetColorU32Ejf"]
    pub fn ImGui_GetColorU322(col: ImU32, alpha_mul: f32) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetStyleColorVec4Ei"]
    pub fn ImGui_GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18GetCursorScreenPosEv"]
    pub fn ImGui_GetCursorScreenPos() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetCursorScreenPosERK6ImVec2"]
    pub fn ImGui_SetCursorScreenPos(pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21GetContentRegionAvailEv"]
    pub fn ImGui_GetContentRegionAvail() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12GetCursorPosEv"]
    pub fn ImGui_GetCursorPos() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetCursorPosXEv"]
    pub fn ImGui_GetCursorPosX() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetCursorPosYEv"]
    pub fn ImGui_GetCursorPosY() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SetCursorPosERK6ImVec2"]
    pub fn ImGui_SetCursorPos(local_pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13SetCursorPosXEf"]
    pub fn ImGui_SetCursorPosX(local_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13SetCursorPosYEf"]
    pub fn ImGui_SetCursorPosY(local_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetCursorStartPosEv"]
    pub fn ImGui_GetCursorStartPos() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9SeparatorEv"]
    pub fn ImGui_Separator();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8SameLineEff"]
    pub fn ImGui_SameLine(offset_from_start_x: f32, spacing: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7NewLineEv"]
    pub fn ImGui_NewLine();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7SpacingEv"]
    pub fn ImGui_Spacing();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5DummyERK6ImVec2"]
    pub fn ImGui_Dummy(size: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6IndentEf"]
    pub fn ImGui_Indent(indent_w: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8UnindentEf"]
    pub fn ImGui_Unindent(indent_w: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BeginGroupEv"]
    pub fn ImGui_BeginGroup();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8EndGroupEv"]
    pub fn ImGui_EndGroup();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23AlignTextToFramePaddingEv"]
    pub fn ImGui_AlignTextToFramePadding();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetTextLineHeightEv"]
    pub fn ImGui_GetTextLineHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui28GetTextLineHeightWithSpacingEv"]
    pub fn ImGui_GetTextLineHeightWithSpacing() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetFrameHeightEv"]
    pub fn ImGui_GetFrameHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui25GetFrameHeightWithSpacingEv"]
    pub fn ImGui_GetFrameHeightWithSpacing() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6PushIDEPKc"]
    pub fn ImGui_PushID(str_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6PushIDEPKcS1_"]
    pub fn ImGui_PushID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6PushIDEPKv"]
    pub fn ImGui_PushID2(ptr_id: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6PushIDEi"]
    pub fn ImGui_PushID3(int_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5PopIDEv"]
    pub fn ImGui_PopID();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5GetIDEPKc"]
    pub fn ImGui_GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5GetIDEPKcS1_"]
    pub fn ImGui_GetID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5GetIDEPKv"]
    pub fn ImGui_GetID2(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5GetIDEi"]
    pub fn ImGui_GetID3(int_id: ::std::os::raw::c_int) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15TextUnformattedEPKcS1_"]
    pub fn ImGui_TextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui4TextEPKcz"]
    pub fn ImGui_Text(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5TextVEPKcPc"]
    pub fn ImGui_TextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11TextColoredERK6ImVec4PKcz"]
    pub fn ImGui_TextColored(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12TextColoredVERK6ImVec4PKcPc"]
    pub fn ImGui_TextColoredV(
        col: *const ImVec4,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12TextDisabledEPKcz"]
    pub fn ImGui_TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13TextDisabledVEPKcPc"]
    pub fn ImGui_TextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11TextWrappedEPKcz"]
    pub fn ImGui_TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12TextWrappedVEPKcPc"]
    pub fn ImGui_TextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9LabelTextEPKcS1_z"]
    pub fn ImGui_LabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10LabelTextVEPKcS1_Pc"]
    pub fn ImGui_LabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BulletTextEPKcz"]
    pub fn ImGui_BulletText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11BulletTextVEPKcPc"]
    pub fn ImGui_BulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13SeparatorTextEPKc"]
    pub fn ImGui_SeparatorText(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6ButtonEPKcRK6ImVec2"]
    pub fn ImGui_Button(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11SmallButtonEPKc"]
    pub fn ImGui_SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15InvisibleButtonEPKcRK6ImVec2i"]
    pub fn ImGui_InvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11ArrowButtonEPKc8ImGuiDir"]
    pub fn ImGui_ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8CheckboxEPKcPb"]
    pub fn ImGui_Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13CheckboxFlagsEPKcPii"]
    pub fn ImGui_CheckboxFlags(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13CheckboxFlagsEPKcPjj"]
    pub fn ImGui_CheckboxFlags1(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11RadioButtonEPKcb"]
    pub fn ImGui_RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11RadioButtonEPKcPii"]
    pub fn ImGui_RadioButton1(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11ProgressBarEfRK6ImVec2PKc"]
    pub fn ImGui_ProgressBar(
        fraction: f32,
        size_arg: *const ImVec2,
        overlay: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui6BulletEv"]
    pub fn ImGui_Bullet();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8TextLinkEPKc"]
    pub fn ImGui_TextLink(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15TextLinkOpenURLEPKcS1_"]
    pub fn ImGui_TextLinkOpenURL(
        label: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ImageE12ImTextureRefRK6ImVec2S3_S3_"]
    pub fn ImGui_Image(
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11ImageWithBgE12ImTextureRefRK6ImVec2S3_S3_RK6ImVec4S6_"]
    pub fn ImGui_ImageWithBg(
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11ImageButtonEPKc12ImTextureRefRK6ImVec2S5_S5_RK6ImVec4S8_"]
    pub fn ImGui_ImageButton(
        str_id: *const ::std::os::raw::c_char,
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BeginComboEPKcS1_i"]
    pub fn ImGui_BeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8EndComboEv"]
    pub fn ImGui_EndCombo();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ComboEPKcPiPKS1_ii"]
    pub fn ImGui_Combo(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ComboEPKcPiS1_i"]
    pub fn ImGui_Combo1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ComboEPKcPiPFS1_PviES3_ii"]
    pub fn ImGui_Combo2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9DragFloatEPKcPffffS1_i"]
    pub fn ImGui_DragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10DragFloat2EPKcPffffS1_i"]
    pub fn ImGui_DragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10DragFloat3EPKcPffffS1_i"]
    pub fn ImGui_DragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10DragFloat4EPKcPffffS1_i"]
    pub fn ImGui_DragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15DragFloatRange2EPKcPfS2_fffS1_S1_i"]
    pub fn ImGui_DragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7DragIntEPKcPifiiS1_i"]
    pub fn ImGui_DragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8DragInt2EPKcPifiiS1_i"]
    pub fn ImGui_DragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8DragInt3EPKcPifiiS1_i"]
    pub fn ImGui_DragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8DragInt4EPKcPifiiS1_i"]
    pub fn ImGui_DragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13DragIntRange2EPKcPiS2_fiiS1_S1_i"]
    pub fn ImGui_DragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_i"]
    pub fn ImGui_DragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_i"]
    pub fn ImGui_DragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11SliderFloatEPKcPfffS1_i"]
    pub fn ImGui_SliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SliderFloat2EPKcPfffS1_i"]
    pub fn ImGui_SliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SliderFloat3EPKcPfffS1_i"]
    pub fn ImGui_SliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SliderFloat4EPKcPfffS1_i"]
    pub fn ImGui_SliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11SliderAngleEPKcPfffS1_i"]
    pub fn ImGui_SliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9SliderIntEPKcPiiiS1_i"]
    pub fn ImGui_SliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SliderInt2EPKcPiiiS1_i"]
    pub fn ImGui_SliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SliderInt3EPKcPiiiS1_i"]
    pub fn ImGui_SliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SliderInt4EPKcPiiiS1_i"]
    pub fn ImGui_SliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_i"]
    pub fn ImGui_SliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_i"]
    pub fn ImGui_SliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12VSliderFloatEPKcRK6ImVec2PfffS1_i"]
    pub fn ImGui_VSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10VSliderIntEPKcRK6ImVec2PiiiS1_i"]
    pub fn ImGui_VSliderInt(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13VSliderScalarEPKcRK6ImVec2iPvPKvS7_S1_i"]
    pub fn ImGui_VSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9InputTextEPKcPcmiPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18InputTextMultilineEPKcPcmRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17InputTextWithHintEPKcS1_PcmiPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10InputFloatEPKcPfffS1_i"]
    pub fn ImGui_InputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11InputFloat2EPKcPfS1_i"]
    pub fn ImGui_InputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11InputFloat3EPKcPfS1_i"]
    pub fn ImGui_InputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11InputFloat4EPKcPfS1_i"]
    pub fn ImGui_InputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8InputIntEPKcPiiii"]
    pub fn ImGui_InputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9InputInt2EPKcPii"]
    pub fn ImGui_InputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9InputInt3EPKcPii"]
    pub fn ImGui_InputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9InputInt4EPKcPii"]
    pub fn ImGui_InputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11InputDoubleEPKcPdddS1_i"]
    pub fn ImGui_InputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11InputScalarEPKciPvPKvS4_S1_i"]
    pub fn ImGui_InputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12InputScalarNEPKciPviPKvS4_S1_i"]
    pub fn ImGui_InputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10ColorEdit3EPKcPfi"]
    pub fn ImGui_ColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10ColorEdit4EPKcPfi"]
    pub fn ImGui_ColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12ColorPicker3EPKcPfi"]
    pub fn ImGui_ColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12ColorPicker4EPKcPfiPKf"]
    pub fn ImGui_ColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11ColorButtonEPKcRK6ImVec4iRK6ImVec2"]
    pub fn ImGui_ColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: *const ImVec4,
        flags: ImGuiColorEditFlags,
        size: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetColorEditOptionsEi"]
    pub fn ImGui_SetColorEditOptions(flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8TreeNodeEPKc"]
    pub fn ImGui_TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8TreeNodeEPKcS1_z"]
    pub fn ImGui_TreeNode1(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8TreeNodeEPKvPKcz"]
    pub fn ImGui_TreeNode2(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9TreeNodeVEPKcS1_Pc"]
    pub fn ImGui_TreeNodeV(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9TreeNodeVEPKvPKcPc"]
    pub fn ImGui_TreeNodeV1(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10TreeNodeExEPKci"]
    pub fn ImGui_TreeNodeEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10TreeNodeExEPKciS1_z"]
    pub fn ImGui_TreeNodeEx1(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10TreeNodeExEPKviPKcz"]
    pub fn ImGui_TreeNodeEx2(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11TreeNodeExVEPKciS1_Pc"]
    pub fn ImGui_TreeNodeExV(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11TreeNodeExVEPKviPKcPc"]
    pub fn ImGui_TreeNodeExV1(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8TreePushEPKc"]
    pub fn ImGui_TreePush(str_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8TreePushEPKv"]
    pub fn ImGui_TreePush1(ptr_id: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7TreePopEv"]
    pub fn ImGui_TreePop();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui25GetTreeNodeToLabelSpacingEv"]
    pub fn ImGui_GetTreeNodeToLabelSpacing() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16CollapsingHeaderEPKci"]
    pub fn ImGui_CollapsingHeader(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16CollapsingHeaderEPKcPbi"]
    pub fn ImGui_CollapsingHeader1(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15SetNextItemOpenEbi"]
    pub fn ImGui_SetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20SetNextItemStorageIDEj"]
    pub fn ImGui_SetNextItemStorageID(storage_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SelectableEPKcbiRK6ImVec2"]
    pub fn ImGui_Selectable(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SelectableEPKcPbiRK6ImVec2"]
    pub fn ImGui_Selectable1(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16BeginMultiSelectEiii"]
    pub fn ImGui_BeginMultiSelect(
        flags: ImGuiMultiSelectFlags,
        selection_size: ::std::os::raw::c_int,
        items_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiMultiSelectIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14EndMultiSelectEv"]
    pub fn ImGui_EndMultiSelect() -> *mut ImGuiMultiSelectIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui28SetNextItemSelectionUserDataEx"]
    pub fn ImGui_SetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui22IsItemToggledSelectionEv"]
    pub fn ImGui_IsItemToggledSelection() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12BeginListBoxEPKcRK6ImVec2"]
    pub fn ImGui_BeginListBox(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10EndListBoxEv"]
    pub fn ImGui_EndListBox();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7ListBoxEPKcPiPKS1_ii"]
    pub fn ImGui_ListBox(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7ListBoxEPKcPiPFS1_PviES3_ii"]
    pub fn ImGui_ListBox1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9PlotLinesEPKcPKfiiS1_ff6ImVec2i"]
    pub fn ImGui_PlotLines(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9PlotLinesEPKcPFfPviES2_iiS1_ff6ImVec2"]
    pub fn ImGui_PlotLines1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13PlotHistogramEPKcPKfiiS1_ff6ImVec2i"]
    pub fn ImGui_PlotHistogram(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13PlotHistogramEPKcPFfPviES2_iiS1_ff6ImVec2"]
    pub fn ImGui_PlotHistogram1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ValueEPKcb"]
    pub fn ImGui_Value(prefix: *const ::std::os::raw::c_char, b: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ValueEPKci"]
    pub fn ImGui_Value1(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ValueEPKcj"]
    pub fn ImGui_Value2(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ValueEPKcfS1_"]
    pub fn ImGui_Value3(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12BeginMenuBarEv"]
    pub fn ImGui_BeginMenuBar() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10EndMenuBarEv"]
    pub fn ImGui_EndMenuBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16BeginMainMenuBarEv"]
    pub fn ImGui_BeginMainMenuBar() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14EndMainMenuBarEv"]
    pub fn ImGui_EndMainMenuBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9BeginMenuEPKcb"]
    pub fn ImGui_BeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7EndMenuEv"]
    pub fn ImGui_EndMenu();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8MenuItemEPKcS1_bb"]
    pub fn ImGui_MenuItem(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8MenuItemEPKcS1_Pbb"]
    pub fn ImGui_MenuItem1(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12BeginTooltipEv"]
    pub fn ImGui_BeginTooltip() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10EndTooltipEv"]
    pub fn ImGui_EndTooltip();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10SetTooltipEPKcz"]
    pub fn ImGui_SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11SetTooltipVEPKcPc"]
    pub fn ImGui_SetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16BeginItemTooltipEv"]
    pub fn ImGui_BeginItemTooltip() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetItemTooltipEPKcz"]
    pub fn ImGui_SetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15SetItemTooltipVEPKcPc"]
    pub fn ImGui_SetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BeginPopupEPKci"]
    pub fn ImGui_BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags)
    -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15BeginPopupModalEPKcPbi"]
    pub fn ImGui_BeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8EndPopupEv"]
    pub fn ImGui_EndPopup();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9OpenPopupEPKci"]
    pub fn ImGui_OpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9OpenPopupEji"]
    pub fn ImGui_OpenPopup1(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20OpenPopupOnItemClickEPKci"]
    pub fn ImGui_OpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17CloseCurrentPopupEv"]
    pub fn ImGui_CloseCurrentPopup();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21BeginPopupContextItemEPKci"]
    pub fn ImGui_BeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23BeginPopupContextWindowEPKci"]
    pub fn ImGui_BeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21BeginPopupContextVoidEPKci"]
    pub fn ImGui_BeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11IsPopupOpenEPKci"]
    pub fn ImGui_IsPopupOpen(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
    -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10BeginTableEPKciiRK6ImVec2f"]
    pub fn ImGui_BeginTable(
        str_id: *const ::std::os::raw::c_char,
        columns: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: *const ImVec2,
        inner_width: f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8EndTableEv"]
    pub fn ImGui_EndTable();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12TableNextRowEif"]
    pub fn ImGui_TableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15TableNextColumnEv"]
    pub fn ImGui_TableNextColumn() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19TableSetColumnIndexEi"]
    pub fn ImGui_TableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16TableSetupColumnEPKcifj"]
    pub fn ImGui_TableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui22TableSetupScrollFreezeEii"]
    pub fn ImGui_TableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11TableHeaderEPKc"]
    pub fn ImGui_TableHeader(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15TableHeadersRowEv"]
    pub fn ImGui_TableHeadersRow();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21TableAngledHeadersRowEv"]
    pub fn ImGui_TableAngledHeadersRow();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17TableGetSortSpecsEv"]
    pub fn ImGui_TableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19TableGetColumnCountEv"]
    pub fn ImGui_TableGetColumnCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19TableGetColumnIndexEv"]
    pub fn ImGui_TableGetColumnIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16TableGetRowIndexEv"]
    pub fn ImGui_TableGetRowIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18TableGetColumnNameEi"]
    pub fn ImGui_TableGetColumnName(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19TableGetColumnFlagsEi"]
    pub fn ImGui_TableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21TableSetColumnEnabledEib"]
    pub fn ImGui_TableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21TableGetHoveredColumnEv"]
    pub fn ImGui_TableGetHoveredColumn() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15TableSetBgColorEiji"]
    pub fn ImGui_TableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7ColumnsEiPKcb"]
    pub fn ImGui_Columns(
        count: ::std::os::raw::c_int,
        id: *const ::std::os::raw::c_char,
        borders: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10NextColumnEv"]
    pub fn ImGui_NextColumn();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetColumnIndexEv"]
    pub fn ImGui_GetColumnIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetColumnWidthEi"]
    pub fn ImGui_GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetColumnWidthEif"]
    pub fn ImGui_SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetColumnOffsetEi"]
    pub fn ImGui_GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15SetColumnOffsetEif"]
    pub fn ImGui_SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetColumnsCountEv"]
    pub fn ImGui_GetColumnsCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11BeginTabBarEPKci"]
    pub fn ImGui_BeginTabBar(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9EndTabBarEv"]
    pub fn ImGui_EndTabBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12BeginTabItemEPKcPbi"]
    pub fn ImGui_BeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10EndTabItemEv"]
    pub fn ImGui_EndTabItem();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13TabItemButtonEPKci"]
    pub fn ImGui_TabItemButton(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16SetTabItemClosedEPKc"]
    pub fn ImGui_SetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9DockSpaceEjRK6ImVec2iPK16ImGuiWindowClass"]
    pub fn ImGui_DockSpace(
        dockspace_id: ImGuiID,
        size: *const ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21DockSpaceOverViewportEjPK13ImGuiViewportiPK16ImGuiWindowClass"]
    pub fn ImGui_DockSpaceOverViewport(
        dockspace_id: ImGuiID,
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetNextWindowDockIDEji"]
    pub fn ImGui_SetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetNextWindowClassEPK16ImGuiWindowClass"]
    pub fn ImGui_SetNextWindowClass(window_class: *const ImGuiWindowClass);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetWindowDockIDEv"]
    pub fn ImGui_GetWindowDockID() -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14IsWindowDockedEv"]
    pub fn ImGui_IsWindowDocked() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8LogToTTYEi"]
    pub fn ImGui_LogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9LogToFileEiPKc"]
    pub fn ImGui_LogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14LogToClipboardEi"]
    pub fn ImGui_LogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9LogFinishEv"]
    pub fn ImGui_LogFinish();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10LogButtonsEv"]
    pub fn ImGui_LogButtons();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7LogTextEPKcz"]
    pub fn ImGui_LogText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8LogTextVEPKcPc"]
    pub fn ImGui_LogTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19BeginDragDropSourceEi"]
    pub fn ImGui_BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetDragDropPayloadEPKcPKvmi"]
    pub fn ImGui_SetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17EndDragDropSourceEv"]
    pub fn ImGui_EndDragDropSource();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19BeginDragDropTargetEv"]
    pub fn ImGui_BeginDragDropTarget() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21AcceptDragDropPayloadEPKci"]
    pub fn ImGui_AcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17EndDragDropTargetEv"]
    pub fn ImGui_EndDragDropTarget();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18GetDragDropPayloadEv"]
    pub fn ImGui_GetDragDropPayload() -> *const ImGuiPayload;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13BeginDisabledEb"]
    pub fn ImGui_BeginDisabled(disabled: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11EndDisabledEv"]
    pub fn ImGui_EndDisabled();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12PushClipRectERK6ImVec2S2_b"]
    pub fn ImGui_PushClipRect(
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11PopClipRectEv"]
    pub fn ImGui_PopClipRect();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetItemDefaultFocusEv"]
    pub fn ImGui_SetItemDefaultFocus();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20SetKeyboardFocusHereEi"]
    pub fn ImGui_SetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetNavCursorVisibleEb"]
    pub fn ImGui_SetNavCursorVisible(visible: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23SetNextItemAllowOverlapEv"]
    pub fn ImGui_SetNextItemAllowOverlap();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsItemHoveredEi"]
    pub fn ImGui_IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12IsItemActiveEv"]
    pub fn ImGui_IsItemActive() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsItemFocusedEv"]
    pub fn ImGui_IsItemFocused() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsItemClickedEi"]
    pub fn ImGui_IsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsItemVisibleEv"]
    pub fn ImGui_IsItemVisible() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12IsItemEditedEv"]
    pub fn ImGui_IsItemEdited() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsItemActivatedEv"]
    pub fn ImGui_IsItemActivated() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17IsItemDeactivatedEv"]
    pub fn ImGui_IsItemDeactivated() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui26IsItemDeactivatedAfterEditEv"]
    pub fn ImGui_IsItemDeactivatedAfterEdit() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17IsItemToggledOpenEv"]
    pub fn ImGui_IsItemToggledOpen() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16IsAnyItemHoveredEv"]
    pub fn ImGui_IsAnyItemHovered() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsAnyItemActiveEv"]
    pub fn ImGui_IsAnyItemActive() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16IsAnyItemFocusedEv"]
    pub fn ImGui_IsAnyItemFocused() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9GetItemIDEv"]
    pub fn ImGui_GetItemID() -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetItemRectMinEv"]
    pub fn ImGui_GetItemRectMin() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetItemRectMaxEv"]
    pub fn ImGui_GetItemRectMax() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetItemRectSizeEv"]
    pub fn ImGui_GetItemRectSize() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetMainViewportEv"]
    pub fn ImGui_GetMainViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport"]
    pub fn ImGui_GetBackgroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport"]
    pub fn ImGui_GetForegroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsRectVisibleERK6ImVec2"]
    pub fn ImGui_IsRectVisible(size: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsRectVisibleERK6ImVec2S2_"]
    pub fn ImGui_IsRectVisible1(rect_min: *const ImVec2, rect_max: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7GetTimeEv"]
    pub fn ImGui_GetTime() -> f64;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13GetFrameCountEv"]
    pub fn ImGui_GetFrameCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21GetDrawListSharedDataEv"]
    pub fn ImGui_GetDrawListSharedData() -> *mut ImDrawListSharedData;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetStyleColorNameEi"]
    pub fn ImGui_GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15SetStateStorageEP12ImGuiStorage"]
    pub fn ImGui_SetStateStorage(storage: *mut ImGuiStorage);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15GetStateStorageEv"]
    pub fn ImGui_GetStateStorage() -> *mut ImGuiStorage;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12CalcTextSizeEPKcS1_bf"]
    pub fn ImGui_CalcTextSize(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23ColorConvertU32ToFloat4Ej"]
    pub fn ImGui_ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4"]
    pub fn ImGui_ColorConvertFloat4ToU32(in_: *const ImVec4) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_"]
    pub fn ImGui_ColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_"]
    pub fn ImGui_ColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9IsKeyDownE8ImGuiKey"]
    pub fn ImGui_IsKeyDown(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui12IsKeyPressedE8ImGuiKeyb"]
    pub fn ImGui_IsKeyPressed(key: ImGuiKey, repeat: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui13IsKeyReleasedE8ImGuiKey"]
    pub fn ImGui_IsKeyReleased(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17IsKeyChordPressedEi"]
    pub fn ImGui_IsKeyChordPressed(key_chord: ImGuiKeyChord) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff"]
    pub fn ImGui_GetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui10GetKeyNameE8ImGuiKey"]
    pub fn ImGui_GetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui31SetNextFrameWantCaptureKeyboardEb"]
    pub fn ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8ShortcutEii"]
    pub fn ImGui_Shortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetNextItemShortcutEii"]
    pub fn ImGui_SetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15SetItemKeyOwnerE8ImGuiKey"]
    pub fn ImGui_SetItemKeyOwner(key: ImGuiKey);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11IsMouseDownEi"]
    pub fn ImGui_IsMouseDown(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14IsMouseClickedEib"]
    pub fn ImGui_IsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsMouseReleasedEi"]
    pub fn ImGui_IsMouseReleased(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20IsMouseDoubleClickedEi"]
    pub fn ImGui_IsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui24IsMouseReleasedWithDelayEif"]
    pub fn ImGui_IsMouseReleasedWithDelay(button: ImGuiMouseButton, delay: f32) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20GetMouseClickedCountEi"]
    pub fn ImGui_GetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b"]
    pub fn ImGui_IsMouseHoveringRect(
        r_min: *const ImVec2,
        r_max: *const ImVec2,
        clip: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsMousePosValidEPK6ImVec2"]
    pub fn ImGui_IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14IsAnyMouseDownEv"]
    pub fn ImGui_IsAnyMouseDown() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui11GetMousePosEv"]
    pub fn ImGui_GetMousePos() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv"]
    pub fn ImGui_GetMousePosOnOpeningCurrentPopup() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui15IsMouseDraggingEif"]
    pub fn ImGui_IsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17GetMouseDragDeltaEif"]
    pub fn ImGui_GetMouseDragDelta(button: ImGuiMouseButton, lock_threshold: f32) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19ResetMouseDragDeltaEi"]
    pub fn ImGui_ResetMouseDragDelta(button: ImGuiMouseButton);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14GetMouseCursorEv"]
    pub fn ImGui_GetMouseCursor() -> ImGuiMouseCursor;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui14SetMouseCursorEi"]
    pub fn ImGui_SetMouseCursor(cursor_type: ImGuiMouseCursor);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui28SetNextFrameWantCaptureMouseEb"]
    pub fn ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16GetClipboardTextEv"]
    pub fn ImGui_GetClipboardText() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16SetClipboardTextEPKc"]
    pub fn ImGui_SetClipboardText(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23LoadIniSettingsFromDiskEPKc"]
    pub fn ImGui_LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui25LoadIniSettingsFromMemoryEPKcm"]
    pub fn ImGui_LoadIniSettingsFromMemory(
        ini_data: *const ::std::os::raw::c_char,
        ini_size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21SaveIniSettingsToDiskEPKc"]
    pub fn ImGui_SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui23SaveIniSettingsToMemoryEPm"]
    pub fn ImGui_SaveIniSettingsToMemory(out_ini_size: *mut usize)
    -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui17DebugTextEncodingEPKc"]
    pub fn ImGui_DebugTextEncoding(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20DebugFlashStyleColorEi"]
    pub fn ImGui_DebugFlashStyleColor(idx: ImGuiCol);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui20DebugStartItemPickerEv"]
    pub fn ImGui_DebugStartItemPicker();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm"]
    pub fn ImGui_DebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8DebugLogEPKcz"]
    pub fn ImGui_DebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui9DebugLogVEPKcPc"]
    pub fn ImGui_DebugLogV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_"]
    pub fn ImGui_SetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_"]
    pub fn ImGui_GetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui8MemAllocEm"]
    pub fn ImGui_MemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7MemFreeEPv"]
    pub fn ImGui_MemFree(ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui21UpdatePlatformWindowsEv"]
    pub fn ImGui_UpdatePlatformWindows();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui28RenderPlatformWindowsDefaultEPvS0_"]
    pub fn ImGui_RenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui22DestroyPlatformWindowsEv"]
    pub fn ImGui_DestroyPlatformWindows();
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui16FindViewportByIDEj"]
    pub fn ImGui_FindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui28FindViewportByPlatformHandleEPv"]
    pub fn ImGui_FindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui18SetWindowFontScaleEf"]
    pub fn ImGui_SetWindowFontScale(scale: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ImageE12ImTextureRefRK6ImVec2S3_S3_RK6ImVec4S6_"]
    pub fn ImGui_Image1(
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        tint_col: *const ImVec4,
        border_col: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19GetContentRegionMaxEv"]
    pub fn ImGui_GetContentRegionMax() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui25GetWindowContentRegionMinEv"]
    pub fn ImGui_GetWindowContentRegionMin() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui25GetWindowContentRegionMaxEv"]
    pub fn ImGui_GetWindowContentRegionMax() -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui5ComboEPKcPiPFbPviPS1_ES3_ii"]
    pub fn ImGui_Combo3(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        old_callback: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui7ListBoxEPKcPiPFbPviPS1_ES3_ii"]
    pub fn ImGui_ListBox2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        old_callback: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN5ImGui19SetItemAllowOverlapEv"]
    pub fn ImGui_SetItemAllowOverlap();
}
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 131072;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 196608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 197120;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 536870912;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 1073741824;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiChildFlags__ImGuiChildFlags_None: ImGuiChildFlags_ = 0;
pub const ImGuiChildFlags__ImGuiChildFlags_Borders: ImGuiChildFlags_ = 1;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = 2;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = 4;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = 8;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = 16;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = 32;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = 64;
pub const ImGuiChildFlags__ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = 128;
pub const ImGuiChildFlags__ImGuiChildFlags_NavFlattened: ImGuiChildFlags_ = 256;
pub const ImGuiChildFlags__ImGuiChildFlags_Border: ImGuiChildFlags_ = 1;
pub type ImGuiChildFlags_ = ::std::os::raw::c_uint;
pub const ImGuiItemFlags__ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags__ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags__ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags__ImGuiItemFlags_AutoClosePopups: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags__ImGuiItemFlags_AllowDuplicateId: ImGuiItemFlags_ = 32;
pub type ImGuiItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ParseEmptyRefVal: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_DisplayEmptyRefVal: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ElideLeft: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ =
    262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ =
    2097152;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 4194304;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 8388608;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanLabelWidth: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = 16384;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_LabelSpanAllColumns: ImGuiTreeNodeFlags_ = 32768;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsToParent: ImGuiTreeNodeFlags_ = 131072;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DrawLinesNone: ImGuiTreeNodeFlags_ = 262144;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DrawLinesFull: ImGuiTreeNodeFlags_ = 524288;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DrawLinesToNodes: ImGuiTreeNodeFlags_ = 1048576;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 131072;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanTextWidth: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoReopen: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 1024;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 2048;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 3072;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_NoAutoClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Highlight: ImGuiSelectableFlags_ = 32;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = 128;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_DrawSelectedOverline: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 256;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 384;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 128;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoAssumedClosure: ImGuiTabItemFlags_ = 256;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_uint;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ =
    128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ =
    512;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingOverCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoUndocking: ImGuiDockNodeFlags_ = 128;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadAutoExpire: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadNoCrossContext: ImGuiDragDropFlags_ = 64;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadNoCrossProcess: ImGuiDragDropFlags_ = 128;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ =
    2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_Bool: ImGuiDataType_ = 10;
pub const ImGuiDataType__ImGuiDataType_String: ImGuiDataType_ = 11;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 12;
pub type ImGuiDataType_ = ::std::os::raw::c_uint;
pub const ImGuiDir_ImGuiDir_None: ImGuiDir = -1;
pub const ImGuiDir_ImGuiDir_Left: ImGuiDir = 0;
pub const ImGuiDir_ImGuiDir_Right: ImGuiDir = 1;
pub const ImGuiDir_ImGuiDir_Up: ImGuiDir = 2;
pub const ImGuiDir_ImGuiDir_Down: ImGuiDir = 3;
pub const ImGuiDir_ImGuiDir_COUNT: ImGuiDir = 4;
pub type ImGuiDir = ::std::os::raw::c_int;
pub const ImGuiSortDirection_ImGuiSortDirection_None: ImGuiSortDirection = 0;
pub const ImGuiSortDirection_ImGuiSortDirection_Ascending: ImGuiSortDirection = 1;
pub const ImGuiSortDirection_ImGuiSortDirection_Descending: ImGuiSortDirection = 2;
pub type ImGuiSortDirection = ImU8;
pub const ImGuiKey_ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_ImGuiKey_Oem102: ImGuiKey = 631;
pub const ImGuiKey_ImGuiKey_GamepadStart: ImGuiKey = 632;
pub const ImGuiKey_ImGuiKey_GamepadBack: ImGuiKey = 633;
pub const ImGuiKey_ImGuiKey_GamepadFaceLeft: ImGuiKey = 634;
pub const ImGuiKey_ImGuiKey_GamepadFaceRight: ImGuiKey = 635;
pub const ImGuiKey_ImGuiKey_GamepadFaceUp: ImGuiKey = 636;
pub const ImGuiKey_ImGuiKey_GamepadFaceDown: ImGuiKey = 637;
pub const ImGuiKey_ImGuiKey_GamepadDpadLeft: ImGuiKey = 638;
pub const ImGuiKey_ImGuiKey_GamepadDpadRight: ImGuiKey = 639;
pub const ImGuiKey_ImGuiKey_GamepadDpadUp: ImGuiKey = 640;
pub const ImGuiKey_ImGuiKey_GamepadDpadDown: ImGuiKey = 641;
pub const ImGuiKey_ImGuiKey_GamepadL1: ImGuiKey = 642;
pub const ImGuiKey_ImGuiKey_GamepadR1: ImGuiKey = 643;
pub const ImGuiKey_ImGuiKey_GamepadL2: ImGuiKey = 644;
pub const ImGuiKey_ImGuiKey_GamepadR2: ImGuiKey = 645;
pub const ImGuiKey_ImGuiKey_GamepadL3: ImGuiKey = 646;
pub const ImGuiKey_ImGuiKey_GamepadR3: ImGuiKey = 647;
pub const ImGuiKey_ImGuiKey_GamepadLStickLeft: ImGuiKey = 648;
pub const ImGuiKey_ImGuiKey_GamepadLStickRight: ImGuiKey = 649;
pub const ImGuiKey_ImGuiKey_GamepadLStickUp: ImGuiKey = 650;
pub const ImGuiKey_ImGuiKey_GamepadLStickDown: ImGuiKey = 651;
pub const ImGuiKey_ImGuiKey_GamepadRStickLeft: ImGuiKey = 652;
pub const ImGuiKey_ImGuiKey_GamepadRStickRight: ImGuiKey = 653;
pub const ImGuiKey_ImGuiKey_GamepadRStickUp: ImGuiKey = 654;
pub const ImGuiKey_ImGuiKey_GamepadRStickDown: ImGuiKey = 655;
pub const ImGuiKey_ImGuiKey_MouseLeft: ImGuiKey = 656;
pub const ImGuiKey_ImGuiKey_MouseRight: ImGuiKey = 657;
pub const ImGuiKey_ImGuiKey_MouseMiddle: ImGuiKey = 658;
pub const ImGuiKey_ImGuiKey_MouseX1: ImGuiKey = 659;
pub const ImGuiKey_ImGuiKey_MouseX2: ImGuiKey = 660;
pub const ImGuiKey_ImGuiKey_MouseWheelX: ImGuiKey = 661;
pub const ImGuiKey_ImGuiKey_MouseWheelY: ImGuiKey = 662;
pub const ImGuiKey_ImGuiKey_ReservedForModCtrl: ImGuiKey = 663;
pub const ImGuiKey_ImGuiKey_ReservedForModShift: ImGuiKey = 664;
pub const ImGuiKey_ImGuiKey_ReservedForModAlt: ImGuiKey = 665;
pub const ImGuiKey_ImGuiKey_ReservedForModSuper: ImGuiKey = 666;
pub const ImGuiKey_ImGuiKey_NamedKey_END: ImGuiKey = 667;
pub const ImGuiKey_ImGuiKey_NamedKey_COUNT: ImGuiKey = 155;
pub const ImGuiKey_ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiKey_ImGuiMod_Mask_: ImGuiKey = 61440;
pub const ImGuiKey_ImGuiKey_COUNT: ImGuiKey = 667;
pub const ImGuiKey_ImGuiMod_Shortcut: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiKey_ModCtrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiKey_ModShift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiKey_ModAlt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiKey_ModSuper: ImGuiKey = 32768;
pub type ImGuiKey = ::std::os::raw::c_int;
pub const ImGuiInputFlags__ImGuiInputFlags_None: ImGuiInputFlags_ = 0;
pub const ImGuiInputFlags__ImGuiInputFlags_Repeat: ImGuiInputFlags_ = 1;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteActive: ImGuiInputFlags_ = 1024;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = 2048;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = 4096;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = 8192;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteOverFocused: ImGuiInputFlags_ = 16384;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteOverActive: ImGuiInputFlags_ = 32768;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = 65536;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFromRootWindow: ImGuiInputFlags_ = 131072;
pub const ImGuiInputFlags__ImGuiInputFlags_Tooltip: ImGuiInputFlags_ = 262144;
pub type ImGuiInputFlags_ = ::std::os::raw::c_uint;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoKeyboard: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 128;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 32768;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_uint;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasTextures: ImGuiBackendFlags_ = 16;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_uint;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_InputTextCursor: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabSelected: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabSelectedOverline: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_TabDimmed: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_TabDimmedSelected: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_TabDimmedSelectedOverline: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_TextLink: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_TreeLines: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 55;
pub const ImGuiCol__ImGuiCol_NavCursor: ImGuiCol_ = 56;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 57;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 58;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 59;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 60;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 56;
pub type ImGuiCol_ = ::std::os::raw::c_uint;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_ImageBorderSize: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBorderSize: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarOverlineSize: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar__ImGuiStyleVar_TableAngledHeadersAngle: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar__ImGuiStyleVar_TableAngledHeadersTextAlign: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar__ImGuiStyleVar_TreeLinesSize: ImGuiStyleVar_ = 29;
pub const ImGuiStyleVar__ImGuiStyleVar_TreeLinesRounding: ImGuiStyleVar_ = 30;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 31;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 32;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 33;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 34;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 35;
pub const ImGuiStyleVar__ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 36;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 37;
pub type ImGuiStyleVar_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags__ImGuiButtonFlags_EnableNav: ImGuiButtonFlags_ = 8;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_uint;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaOpaque: ImGuiColorEditFlags_ = 2048;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaNoBg: ImGuiColorEditFlags_ = 4096;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 8192;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ =
    177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaMask_: ImGuiColorEditFlags_ = 14338;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 0;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_WrapAround: ImGuiSliderFlags_ = 256;
pub const ImGuiSliderFlags__ImGuiSliderFlags_ClampOnInput: ImGuiSliderFlags_ = 512;
pub const ImGuiSliderFlags__ImGuiSliderFlags_ClampZeroRange: ImGuiSliderFlags_ = 1024;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoSpeedTweaks: ImGuiSliderFlags_ = 2048;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 1536;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_uint;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_uint;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Wait: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Progress: ImGuiMouseCursor_ = 9;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 10;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 11;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_uint;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = 268435456;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ =
    1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ =
    2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ =
    16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending:
    ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ =
    131072;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ =
    262144;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ =
    134217728;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ =
    251658240;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ =
    1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableSortSpecs"][::std::mem::size_of::<ImGuiTableSortSpecs>() - 16usize];
    ["Alignment of ImGuiTableSortSpecs"][::std::mem::align_of::<ImGuiTableSortSpecs>() - 8usize];
    ["Offset of field: ImGuiTableSortSpecs::Specs"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, Specs) - 0usize];
    ["Offset of field: ImGuiTableSortSpecs::SpecsCount"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, SpecsCount) - 8usize];
    ["Offset of field: ImGuiTableSortSpecs::SpecsDirty"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, SpecsDirty) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub SortDirection: ImGuiSortDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumnSortSpecs"]
        [::std::mem::size_of::<ImGuiTableColumnSortSpecs>() - 12usize];
    ["Alignment of ImGuiTableColumnSortSpecs"]
        [::std::mem::align_of::<ImGuiTableColumnSortSpecs>() - 4usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::ColumnUserID"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, ColumnUserID) - 0usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::ColumnIndex"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, ColumnIndex) - 4usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, SortOrder) - 6usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::SortDirection"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, SortDirection) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNewWrapper {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImNewWrapper"][::std::mem::size_of::<ImNewWrapper>() - 1usize];
    ["Alignment of ImNewWrapper"][::std::mem::align_of::<ImNewWrapper>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImVector<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut T,
}
pub type ImVector_value_type<T> = T;
pub type ImVector_iterator<T> = *mut ImVector_value_type<T>;
pub type ImVector_const_iterator<T> = *const ImVector_value_type<T>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle {
    pub FontSizeBase: f32,
    pub FontScaleMain: f32,
    pub FontScaleDpi: f32,
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowBorderHoverPadding: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub ImageBorderSize: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabCloseButtonMinWidthSelected: f32,
    pub TabCloseButtonMinWidthUnselected: f32,
    pub TabBarBorderSize: f32,
    pub TabBarOverlineSize: f32,
    pub TableAngledHeadersAngle: f32,
    pub TableAngledHeadersTextAlign: ImVec2,
    pub TreeLinesFlags: ImGuiTreeNodeFlags,
    pub TreeLinesSize: f32,
    pub TreeLinesRounding: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 60usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
    pub _MainScale: f32,
    pub _NextFrameFontSizeBase: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyle"][::std::mem::size_of::<ImGuiStyle>() - 1268usize];
    ["Alignment of ImGuiStyle"][::std::mem::align_of::<ImGuiStyle>() - 4usize];
    ["Offset of field: ImGuiStyle::FontSizeBase"]
        [::std::mem::offset_of!(ImGuiStyle, FontSizeBase) - 0usize];
    ["Offset of field: ImGuiStyle::FontScaleMain"]
        [::std::mem::offset_of!(ImGuiStyle, FontScaleMain) - 4usize];
    ["Offset of field: ImGuiStyle::FontScaleDpi"]
        [::std::mem::offset_of!(ImGuiStyle, FontScaleDpi) - 8usize];
    ["Offset of field: ImGuiStyle::Alpha"][::std::mem::offset_of!(ImGuiStyle, Alpha) - 12usize];
    ["Offset of field: ImGuiStyle::DisabledAlpha"]
        [::std::mem::offset_of!(ImGuiStyle, DisabledAlpha) - 16usize];
    ["Offset of field: ImGuiStyle::WindowPadding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowPadding) - 20usize];
    ["Offset of field: ImGuiStyle::WindowRounding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowRounding) - 28usize];
    ["Offset of field: ImGuiStyle::WindowBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, WindowBorderSize) - 32usize];
    ["Offset of field: ImGuiStyle::WindowBorderHoverPadding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowBorderHoverPadding) - 36usize];
    ["Offset of field: ImGuiStyle::WindowMinSize"]
        [::std::mem::offset_of!(ImGuiStyle, WindowMinSize) - 40usize];
    ["Offset of field: ImGuiStyle::WindowTitleAlign"]
        [::std::mem::offset_of!(ImGuiStyle, WindowTitleAlign) - 48usize];
    ["Offset of field: ImGuiStyle::WindowMenuButtonPosition"]
        [::std::mem::offset_of!(ImGuiStyle, WindowMenuButtonPosition) - 56usize];
    ["Offset of field: ImGuiStyle::ChildRounding"]
        [::std::mem::offset_of!(ImGuiStyle, ChildRounding) - 60usize];
    ["Offset of field: ImGuiStyle::ChildBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, ChildBorderSize) - 64usize];
    ["Offset of field: ImGuiStyle::PopupRounding"]
        [::std::mem::offset_of!(ImGuiStyle, PopupRounding) - 68usize];
    ["Offset of field: ImGuiStyle::PopupBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, PopupBorderSize) - 72usize];
    ["Offset of field: ImGuiStyle::FramePadding"]
        [::std::mem::offset_of!(ImGuiStyle, FramePadding) - 76usize];
    ["Offset of field: ImGuiStyle::FrameRounding"]
        [::std::mem::offset_of!(ImGuiStyle, FrameRounding) - 84usize];
    ["Offset of field: ImGuiStyle::FrameBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, FrameBorderSize) - 88usize];
    ["Offset of field: ImGuiStyle::ItemSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ItemSpacing) - 92usize];
    ["Offset of field: ImGuiStyle::ItemInnerSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ItemInnerSpacing) - 100usize];
    ["Offset of field: ImGuiStyle::CellPadding"]
        [::std::mem::offset_of!(ImGuiStyle, CellPadding) - 108usize];
    ["Offset of field: ImGuiStyle::TouchExtraPadding"]
        [::std::mem::offset_of!(ImGuiStyle, TouchExtraPadding) - 116usize];
    ["Offset of field: ImGuiStyle::IndentSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, IndentSpacing) - 124usize];
    ["Offset of field: ImGuiStyle::ColumnsMinSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ColumnsMinSpacing) - 128usize];
    ["Offset of field: ImGuiStyle::ScrollbarSize"]
        [::std::mem::offset_of!(ImGuiStyle, ScrollbarSize) - 132usize];
    ["Offset of field: ImGuiStyle::ScrollbarRounding"]
        [::std::mem::offset_of!(ImGuiStyle, ScrollbarRounding) - 136usize];
    ["Offset of field: ImGuiStyle::GrabMinSize"]
        [::std::mem::offset_of!(ImGuiStyle, GrabMinSize) - 140usize];
    ["Offset of field: ImGuiStyle::GrabRounding"]
        [::std::mem::offset_of!(ImGuiStyle, GrabRounding) - 144usize];
    ["Offset of field: ImGuiStyle::LogSliderDeadzone"]
        [::std::mem::offset_of!(ImGuiStyle, LogSliderDeadzone) - 148usize];
    ["Offset of field: ImGuiStyle::ImageBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, ImageBorderSize) - 152usize];
    ["Offset of field: ImGuiStyle::TabRounding"]
        [::std::mem::offset_of!(ImGuiStyle, TabRounding) - 156usize];
    ["Offset of field: ImGuiStyle::TabBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBorderSize) - 160usize];
    ["Offset of field: ImGuiStyle::TabCloseButtonMinWidthSelected"]
        [::std::mem::offset_of!(ImGuiStyle, TabCloseButtonMinWidthSelected) - 164usize];
    ["Offset of field: ImGuiStyle::TabCloseButtonMinWidthUnselected"]
        [::std::mem::offset_of!(ImGuiStyle, TabCloseButtonMinWidthUnselected) - 168usize];
    ["Offset of field: ImGuiStyle::TabBarBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBarBorderSize) - 172usize];
    ["Offset of field: ImGuiStyle::TabBarOverlineSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBarOverlineSize) - 176usize];
    ["Offset of field: ImGuiStyle::TableAngledHeadersAngle"]
        [::std::mem::offset_of!(ImGuiStyle, TableAngledHeadersAngle) - 180usize];
    ["Offset of field: ImGuiStyle::TableAngledHeadersTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, TableAngledHeadersTextAlign) - 184usize];
    ["Offset of field: ImGuiStyle::TreeLinesFlags"]
        [::std::mem::offset_of!(ImGuiStyle, TreeLinesFlags) - 192usize];
    ["Offset of field: ImGuiStyle::TreeLinesSize"]
        [::std::mem::offset_of!(ImGuiStyle, TreeLinesSize) - 196usize];
    ["Offset of field: ImGuiStyle::TreeLinesRounding"]
        [::std::mem::offset_of!(ImGuiStyle, TreeLinesRounding) - 200usize];
    ["Offset of field: ImGuiStyle::ColorButtonPosition"]
        [::std::mem::offset_of!(ImGuiStyle, ColorButtonPosition) - 204usize];
    ["Offset of field: ImGuiStyle::ButtonTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, ButtonTextAlign) - 208usize];
    ["Offset of field: ImGuiStyle::SelectableTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, SelectableTextAlign) - 216usize];
    ["Offset of field: ImGuiStyle::SeparatorTextBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextBorderSize) - 224usize];
    ["Offset of field: ImGuiStyle::SeparatorTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextAlign) - 228usize];
    ["Offset of field: ImGuiStyle::SeparatorTextPadding"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextPadding) - 236usize];
    ["Offset of field: ImGuiStyle::DisplayWindowPadding"]
        [::std::mem::offset_of!(ImGuiStyle, DisplayWindowPadding) - 244usize];
    ["Offset of field: ImGuiStyle::DisplaySafeAreaPadding"]
        [::std::mem::offset_of!(ImGuiStyle, DisplaySafeAreaPadding) - 252usize];
    ["Offset of field: ImGuiStyle::DockingSeparatorSize"]
        [::std::mem::offset_of!(ImGuiStyle, DockingSeparatorSize) - 260usize];
    ["Offset of field: ImGuiStyle::MouseCursorScale"]
        [::std::mem::offset_of!(ImGuiStyle, MouseCursorScale) - 264usize];
    ["Offset of field: ImGuiStyle::AntiAliasedLines"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedLines) - 268usize];
    ["Offset of field: ImGuiStyle::AntiAliasedLinesUseTex"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedLinesUseTex) - 269usize];
    ["Offset of field: ImGuiStyle::AntiAliasedFill"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedFill) - 270usize];
    ["Offset of field: ImGuiStyle::CurveTessellationTol"]
        [::std::mem::offset_of!(ImGuiStyle, CurveTessellationTol) - 272usize];
    ["Offset of field: ImGuiStyle::CircleTessellationMaxError"]
        [::std::mem::offset_of!(ImGuiStyle, CircleTessellationMaxError) - 276usize];
    ["Offset of field: ImGuiStyle::Colors"][::std::mem::offset_of!(ImGuiStyle, Colors) - 280usize];
    ["Offset of field: ImGuiStyle::HoverStationaryDelay"]
        [::std::mem::offset_of!(ImGuiStyle, HoverStationaryDelay) - 1240usize];
    ["Offset of field: ImGuiStyle::HoverDelayShort"]
        [::std::mem::offset_of!(ImGuiStyle, HoverDelayShort) - 1244usize];
    ["Offset of field: ImGuiStyle::HoverDelayNormal"]
        [::std::mem::offset_of!(ImGuiStyle, HoverDelayNormal) - 1248usize];
    ["Offset of field: ImGuiStyle::HoverFlagsForTooltipMouse"]
        [::std::mem::offset_of!(ImGuiStyle, HoverFlagsForTooltipMouse) - 1252usize];
    ["Offset of field: ImGuiStyle::HoverFlagsForTooltipNav"]
        [::std::mem::offset_of!(ImGuiStyle, HoverFlagsForTooltipNav) - 1256usize];
    ["Offset of field: ImGuiStyle::_MainScale"]
        [::std::mem::offset_of!(ImGuiStyle, _MainScale) - 1260usize];
    ["Offset of field: ImGuiStyle::_NextFrameFontSizeBase"]
        [::std::mem::offset_of!(ImGuiStyle, _NextFrameFontSizeBase) - 1264usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImGuiStyle13ScaleAllSizesEf"]
    pub fn ImGuiStyle_ScaleAllSizes(this: *mut ImGuiStyle, scale_factor: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImGuiStyleC1Ev"]
    pub fn ImGuiStyle_ImGuiStyle(this: *mut ImGuiStyle);
}
impl ImGuiStyle {
    #[inline]
    pub unsafe fn ScaleAllSizes(&mut self, scale_factor: f32) {
        ImGuiStyle_ScaleAllSizes(self, scale_factor)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiStyle_ImGuiStyle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyData"][::std::mem::size_of::<ImGuiKeyData>() - 16usize];
    ["Alignment of ImGuiKeyData"][::std::mem::align_of::<ImGuiKeyData>() - 4usize];
    ["Offset of field: ImGuiKeyData::Down"][::std::mem::offset_of!(ImGuiKeyData, Down) - 0usize];
    ["Offset of field: ImGuiKeyData::DownDuration"]
        [::std::mem::offset_of!(ImGuiKeyData, DownDuration) - 4usize];
    ["Offset of field: ImGuiKeyData::DownDurationPrev"]
        [::std::mem::offset_of!(ImGuiKeyData, DownDurationPrev) - 8usize];
    ["Offset of field: ImGuiKeyData::AnalogValue"]
        [::std::mem::offset_of!(ImGuiKeyData, AnalogValue) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DisplayFramebufferScale: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontDefault: *mut ImFont,
    pub FontAllowUserScaling: bool,
    pub ConfigNavSwapGamepadButtons: bool,
    pub ConfigNavMoveSetMousePos: bool,
    pub ConfigNavCaptureKeyboard: bool,
    pub ConfigNavEscapeClearFocusItem: bool,
    pub ConfigNavEscapeClearFocusWindow: bool,
    pub ConfigNavCursorVisibleAuto: bool,
    pub ConfigNavCursorVisibleAlways: bool,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub ConfigDpiScaleFonts: bool,
    pub ConfigDpiScaleViewports: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigWindowsCopyContentsWithCtrlC: bool,
    pub ConfigScrollbarScrollByPage: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigErrorRecovery: bool,
    pub ConfigErrorRecoveryEnableAssert: bool,
    pub ConfigErrorRecoveryEnableDebugLog: bool,
    pub ConfigErrorRecoveryEnableTooltip: bool,
    pub ConfigDebugIsDebuggerPresent: bool,
    pub ConfigDebugHighlightIdConflicts: bool,
    pub ConfigDebugHighlightIdConflictsShowItemPicker: bool,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 155usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseReleasedTime: [f64; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseCtrlLeftAsRightClick: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector<ImWchar>,
    pub FontGlobalScale: f32,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiIO"][::std::mem::size_of::<ImGuiIO>() - 3088usize];
    ["Alignment of ImGuiIO"][::std::mem::align_of::<ImGuiIO>() - 8usize];
    ["Offset of field: ImGuiIO::ConfigFlags"]
        [::std::mem::offset_of!(ImGuiIO, ConfigFlags) - 0usize];
    ["Offset of field: ImGuiIO::BackendFlags"]
        [::std::mem::offset_of!(ImGuiIO, BackendFlags) - 4usize];
    ["Offset of field: ImGuiIO::DisplaySize"]
        [::std::mem::offset_of!(ImGuiIO, DisplaySize) - 8usize];
    ["Offset of field: ImGuiIO::DisplayFramebufferScale"]
        [::std::mem::offset_of!(ImGuiIO, DisplayFramebufferScale) - 16usize];
    ["Offset of field: ImGuiIO::DeltaTime"][::std::mem::offset_of!(ImGuiIO, DeltaTime) - 24usize];
    ["Offset of field: ImGuiIO::IniSavingRate"]
        [::std::mem::offset_of!(ImGuiIO, IniSavingRate) - 28usize];
    ["Offset of field: ImGuiIO::IniFilename"]
        [::std::mem::offset_of!(ImGuiIO, IniFilename) - 32usize];
    ["Offset of field: ImGuiIO::LogFilename"]
        [::std::mem::offset_of!(ImGuiIO, LogFilename) - 40usize];
    ["Offset of field: ImGuiIO::UserData"][::std::mem::offset_of!(ImGuiIO, UserData) - 48usize];
    ["Offset of field: ImGuiIO::Fonts"][::std::mem::offset_of!(ImGuiIO, Fonts) - 56usize];
    ["Offset of field: ImGuiIO::FontDefault"]
        [::std::mem::offset_of!(ImGuiIO, FontDefault) - 64usize];
    ["Offset of field: ImGuiIO::FontAllowUserScaling"]
        [::std::mem::offset_of!(ImGuiIO, FontAllowUserScaling) - 72usize];
    ["Offset of field: ImGuiIO::ConfigNavSwapGamepadButtons"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavSwapGamepadButtons) - 73usize];
    ["Offset of field: ImGuiIO::ConfigNavMoveSetMousePos"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavMoveSetMousePos) - 74usize];
    ["Offset of field: ImGuiIO::ConfigNavCaptureKeyboard"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavCaptureKeyboard) - 75usize];
    ["Offset of field: ImGuiIO::ConfigNavEscapeClearFocusItem"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavEscapeClearFocusItem) - 76usize];
    ["Offset of field: ImGuiIO::ConfigNavEscapeClearFocusWindow"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavEscapeClearFocusWindow) - 77usize];
    ["Offset of field: ImGuiIO::ConfigNavCursorVisibleAuto"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavCursorVisibleAuto) - 78usize];
    ["Offset of field: ImGuiIO::ConfigNavCursorVisibleAlways"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavCursorVisibleAlways) - 79usize];
    ["Offset of field: ImGuiIO::ConfigDockingNoSplit"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingNoSplit) - 80usize];
    ["Offset of field: ImGuiIO::ConfigDockingWithShift"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingWithShift) - 81usize];
    ["Offset of field: ImGuiIO::ConfigDockingAlwaysTabBar"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingAlwaysTabBar) - 82usize];
    ["Offset of field: ImGuiIO::ConfigDockingTransparentPayload"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingTransparentPayload) - 83usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoAutoMerge"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoAutoMerge) - 84usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoTaskBarIcon"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoTaskBarIcon) - 85usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoDecoration"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoDecoration) - 86usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoDefaultParent"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoDefaultParent) - 87usize];
    ["Offset of field: ImGuiIO::ConfigDpiScaleFonts"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDpiScaleFonts) - 88usize];
    ["Offset of field: ImGuiIO::ConfigDpiScaleViewports"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDpiScaleViewports) - 89usize];
    ["Offset of field: ImGuiIO::MouseDrawCursor"]
        [::std::mem::offset_of!(ImGuiIO, MouseDrawCursor) - 90usize];
    ["Offset of field: ImGuiIO::ConfigMacOSXBehaviors"]
        [::std::mem::offset_of!(ImGuiIO, ConfigMacOSXBehaviors) - 91usize];
    ["Offset of field: ImGuiIO::ConfigInputTrickleEventQueue"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTrickleEventQueue) - 92usize];
    ["Offset of field: ImGuiIO::ConfigInputTextCursorBlink"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTextCursorBlink) - 93usize];
    ["Offset of field: ImGuiIO::ConfigInputTextEnterKeepActive"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTextEnterKeepActive) - 94usize];
    ["Offset of field: ImGuiIO::ConfigDragClickToInputText"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDragClickToInputText) - 95usize];
    ["Offset of field: ImGuiIO::ConfigWindowsResizeFromEdges"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsResizeFromEdges) - 96usize];
    ["Offset of field: ImGuiIO::ConfigWindowsMoveFromTitleBarOnly"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsMoveFromTitleBarOnly) - 97usize];
    ["Offset of field: ImGuiIO::ConfigWindowsCopyContentsWithCtrlC"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsCopyContentsWithCtrlC) - 98usize];
    ["Offset of field: ImGuiIO::ConfigScrollbarScrollByPage"]
        [::std::mem::offset_of!(ImGuiIO, ConfigScrollbarScrollByPage) - 99usize];
    ["Offset of field: ImGuiIO::ConfigMemoryCompactTimer"]
        [::std::mem::offset_of!(ImGuiIO, ConfigMemoryCompactTimer) - 100usize];
    ["Offset of field: ImGuiIO::MouseDoubleClickTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClickTime) - 104usize];
    ["Offset of field: ImGuiIO::MouseDoubleClickMaxDist"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClickMaxDist) - 108usize];
    ["Offset of field: ImGuiIO::MouseDragThreshold"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragThreshold) - 112usize];
    ["Offset of field: ImGuiIO::KeyRepeatDelay"]
        [::std::mem::offset_of!(ImGuiIO, KeyRepeatDelay) - 116usize];
    ["Offset of field: ImGuiIO::KeyRepeatRate"]
        [::std::mem::offset_of!(ImGuiIO, KeyRepeatRate) - 120usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecovery"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecovery) - 124usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecoveryEnableAssert"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecoveryEnableAssert) - 125usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecoveryEnableDebugLog"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecoveryEnableDebugLog) - 126usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecoveryEnableTooltip"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecoveryEnableTooltip) - 127usize];
    ["Offset of field: ImGuiIO::ConfigDebugIsDebuggerPresent"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIsDebuggerPresent) - 128usize];
    ["Offset of field: ImGuiIO::ConfigDebugHighlightIdConflicts"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugHighlightIdConflicts) - 129usize];
    ["Offset of field: ImGuiIO::ConfigDebugHighlightIdConflictsShowItemPicker"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugHighlightIdConflictsShowItemPicker) - 130usize];
    ["Offset of field: ImGuiIO::ConfigDebugBeginReturnValueOnce"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugBeginReturnValueOnce) - 131usize];
    ["Offset of field: ImGuiIO::ConfigDebugBeginReturnValueLoop"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugBeginReturnValueLoop) - 132usize];
    ["Offset of field: ImGuiIO::ConfigDebugIgnoreFocusLoss"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIgnoreFocusLoss) - 133usize];
    ["Offset of field: ImGuiIO::ConfigDebugIniSettings"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIniSettings) - 134usize];
    ["Offset of field: ImGuiIO::BackendPlatformName"]
        [::std::mem::offset_of!(ImGuiIO, BackendPlatformName) - 136usize];
    ["Offset of field: ImGuiIO::BackendRendererName"]
        [::std::mem::offset_of!(ImGuiIO, BackendRendererName) - 144usize];
    ["Offset of field: ImGuiIO::BackendPlatformUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendPlatformUserData) - 152usize];
    ["Offset of field: ImGuiIO::BackendRendererUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendRendererUserData) - 160usize];
    ["Offset of field: ImGuiIO::BackendLanguageUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendLanguageUserData) - 168usize];
    ["Offset of field: ImGuiIO::WantCaptureMouse"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureMouse) - 176usize];
    ["Offset of field: ImGuiIO::WantCaptureKeyboard"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureKeyboard) - 177usize];
    ["Offset of field: ImGuiIO::WantTextInput"]
        [::std::mem::offset_of!(ImGuiIO, WantTextInput) - 178usize];
    ["Offset of field: ImGuiIO::WantSetMousePos"]
        [::std::mem::offset_of!(ImGuiIO, WantSetMousePos) - 179usize];
    ["Offset of field: ImGuiIO::WantSaveIniSettings"]
        [::std::mem::offset_of!(ImGuiIO, WantSaveIniSettings) - 180usize];
    ["Offset of field: ImGuiIO::NavActive"][::std::mem::offset_of!(ImGuiIO, NavActive) - 181usize];
    ["Offset of field: ImGuiIO::NavVisible"]
        [::std::mem::offset_of!(ImGuiIO, NavVisible) - 182usize];
    ["Offset of field: ImGuiIO::Framerate"][::std::mem::offset_of!(ImGuiIO, Framerate) - 184usize];
    ["Offset of field: ImGuiIO::MetricsRenderVertices"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderVertices) - 188usize];
    ["Offset of field: ImGuiIO::MetricsRenderIndices"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderIndices) - 192usize];
    ["Offset of field: ImGuiIO::MetricsRenderWindows"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderWindows) - 196usize];
    ["Offset of field: ImGuiIO::MetricsActiveWindows"]
        [::std::mem::offset_of!(ImGuiIO, MetricsActiveWindows) - 200usize];
    ["Offset of field: ImGuiIO::MouseDelta"]
        [::std::mem::offset_of!(ImGuiIO, MouseDelta) - 204usize];
    ["Offset of field: ImGuiIO::Ctx"][::std::mem::offset_of!(ImGuiIO, Ctx) - 216usize];
    ["Offset of field: ImGuiIO::MousePos"][::std::mem::offset_of!(ImGuiIO, MousePos) - 224usize];
    ["Offset of field: ImGuiIO::MouseDown"][::std::mem::offset_of!(ImGuiIO, MouseDown) - 232usize];
    ["Offset of field: ImGuiIO::MouseWheel"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheel) - 240usize];
    ["Offset of field: ImGuiIO::MouseWheelH"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheelH) - 244usize];
    ["Offset of field: ImGuiIO::MouseSource"]
        [::std::mem::offset_of!(ImGuiIO, MouseSource) - 248usize];
    ["Offset of field: ImGuiIO::MouseHoveredViewport"]
        [::std::mem::offset_of!(ImGuiIO, MouseHoveredViewport) - 252usize];
    ["Offset of field: ImGuiIO::KeyCtrl"][::std::mem::offset_of!(ImGuiIO, KeyCtrl) - 256usize];
    ["Offset of field: ImGuiIO::KeyShift"][::std::mem::offset_of!(ImGuiIO, KeyShift) - 257usize];
    ["Offset of field: ImGuiIO::KeyAlt"][::std::mem::offset_of!(ImGuiIO, KeyAlt) - 258usize];
    ["Offset of field: ImGuiIO::KeySuper"][::std::mem::offset_of!(ImGuiIO, KeySuper) - 259usize];
    ["Offset of field: ImGuiIO::KeyMods"][::std::mem::offset_of!(ImGuiIO, KeyMods) - 260usize];
    ["Offset of field: ImGuiIO::KeysData"][::std::mem::offset_of!(ImGuiIO, KeysData) - 264usize];
    ["Offset of field: ImGuiIO::WantCaptureMouseUnlessPopupClose"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureMouseUnlessPopupClose) - 2744usize];
    ["Offset of field: ImGuiIO::MousePosPrev"]
        [::std::mem::offset_of!(ImGuiIO, MousePosPrev) - 2748usize];
    ["Offset of field: ImGuiIO::MouseClickedPos"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedPos) - 2756usize];
    ["Offset of field: ImGuiIO::MouseClickedTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedTime) - 2800usize];
    ["Offset of field: ImGuiIO::MouseClicked"]
        [::std::mem::offset_of!(ImGuiIO, MouseClicked) - 2840usize];
    ["Offset of field: ImGuiIO::MouseDoubleClicked"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClicked) - 2845usize];
    ["Offset of field: ImGuiIO::MouseClickedCount"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedCount) - 2850usize];
    ["Offset of field: ImGuiIO::MouseClickedLastCount"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedLastCount) - 2860usize];
    ["Offset of field: ImGuiIO::MouseReleased"]
        [::std::mem::offset_of!(ImGuiIO, MouseReleased) - 2870usize];
    ["Offset of field: ImGuiIO::MouseReleasedTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseReleasedTime) - 2880usize];
    ["Offset of field: ImGuiIO::MouseDownOwned"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownOwned) - 2920usize];
    ["Offset of field: ImGuiIO::MouseDownOwnedUnlessPopupClose"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownOwnedUnlessPopupClose) - 2925usize];
    ["Offset of field: ImGuiIO::MouseWheelRequestAxisSwap"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheelRequestAxisSwap) - 2930usize];
    ["Offset of field: ImGuiIO::MouseCtrlLeftAsRightClick"]
        [::std::mem::offset_of!(ImGuiIO, MouseCtrlLeftAsRightClick) - 2931usize];
    ["Offset of field: ImGuiIO::MouseDownDuration"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownDuration) - 2932usize];
    ["Offset of field: ImGuiIO::MouseDownDurationPrev"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownDurationPrev) - 2952usize];
    ["Offset of field: ImGuiIO::MouseDragMaxDistanceAbs"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragMaxDistanceAbs) - 2972usize];
    ["Offset of field: ImGuiIO::MouseDragMaxDistanceSqr"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragMaxDistanceSqr) - 3012usize];
    ["Offset of field: ImGuiIO::PenPressure"]
        [::std::mem::offset_of!(ImGuiIO, PenPressure) - 3032usize];
    ["Offset of field: ImGuiIO::AppFocusLost"]
        [::std::mem::offset_of!(ImGuiIO, AppFocusLost) - 3036usize];
    ["Offset of field: ImGuiIO::AppAcceptingEvents"]
        [::std::mem::offset_of!(ImGuiIO, AppAcceptingEvents) - 3037usize];
    ["Offset of field: ImGuiIO::InputQueueSurrogate"]
        [::std::mem::offset_of!(ImGuiIO, InputQueueSurrogate) - 3038usize];
    ["Offset of field: ImGuiIO::InputQueueCharacters"]
        [::std::mem::offset_of!(ImGuiIO, InputQueueCharacters) - 3040usize];
    ["Offset of field: ImGuiIO::FontGlobalScale"]
        [::std::mem::offset_of!(ImGuiIO, FontGlobalScale) - 3056usize];
    ["Offset of field: ImGuiIO::GetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiIO, GetClipboardTextFn) - 3064usize];
    ["Offset of field: ImGuiIO::SetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiIO, SetClipboardTextFn) - 3072usize];
    ["Offset of field: ImGuiIO::ClipboardUserData"]
        [::std::mem::offset_of!(ImGuiIO, ClipboardUserData) - 3080usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb"]
    pub fn ImGuiIO_AddKeyEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf"]
    pub fn ImGuiIO_AddKeyAnalogEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO16AddMousePosEventEff"]
    pub fn ImGuiIO_AddMousePosEvent(this: *mut ImGuiIO, x: f32, y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO19AddMouseButtonEventEib"]
    pub fn ImGuiIO_AddMouseButtonEvent(
        this: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO18AddMouseWheelEventEff"]
    pub fn ImGuiIO_AddMouseWheelEvent(this: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO19AddMouseSourceEventE16ImGuiMouseSource"]
    pub fn ImGuiIO_AddMouseSourceEvent(this: *mut ImGuiIO, source: ImGuiMouseSource);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO21AddMouseViewportEventEj"]
    pub fn ImGuiIO_AddMouseViewportEvent(this: *mut ImGuiIO, id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO13AddFocusEventEb"]
    pub fn ImGuiIO_AddFocusEvent(this: *mut ImGuiIO, focused: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO17AddInputCharacterEj"]
    pub fn ImGuiIO_AddInputCharacter(this: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO22AddInputCharacterUTF16Et"]
    pub fn ImGuiIO_AddInputCharacterUTF16(this: *mut ImGuiIO, c: ImWchar16);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO22AddInputCharactersUTF8EPKc"]
    pub fn ImGuiIO_AddInputCharactersUTF8(this: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii"]
    pub fn ImGuiIO_SetKeyEventNativeData(
        this: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO21SetAppAcceptingEventsEb"]
    pub fn ImGuiIO_SetAppAcceptingEvents(this: *mut ImGuiIO, accepting_events: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO16ClearEventsQueueEv"]
    pub fn ImGuiIO_ClearEventsQueue(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO14ClearInputKeysEv"]
    pub fn ImGuiIO_ClearInputKeys(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO15ClearInputMouseEv"]
    pub fn ImGuiIO_ClearInputMouse(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIO20ClearInputCharactersEv"]
    pub fn ImGuiIO_ClearInputCharacters(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN7ImGuiIOC1Ev"]
    pub fn ImGuiIO_ImGuiIO(this: *mut ImGuiIO);
}
impl ImGuiIO {
    #[inline]
    pub unsafe fn AddKeyEvent(&mut self, key: ImGuiKey, down: bool) {
        ImGuiIO_AddKeyEvent(self, key, down)
    }
    #[inline]
    pub unsafe fn AddKeyAnalogEvent(&mut self, key: ImGuiKey, down: bool, v: f32) {
        ImGuiIO_AddKeyAnalogEvent(self, key, down, v)
    }
    #[inline]
    pub unsafe fn AddMousePosEvent(&mut self, x: f32, y: f32) {
        ImGuiIO_AddMousePosEvent(self, x, y)
    }
    #[inline]
    pub unsafe fn AddMouseButtonEvent(&mut self, button: ::std::os::raw::c_int, down: bool) {
        ImGuiIO_AddMouseButtonEvent(self, button, down)
    }
    #[inline]
    pub unsafe fn AddMouseWheelEvent(&mut self, wheel_x: f32, wheel_y: f32) {
        ImGuiIO_AddMouseWheelEvent(self, wheel_x, wheel_y)
    }
    #[inline]
    pub unsafe fn AddMouseSourceEvent(&mut self, source: ImGuiMouseSource) {
        ImGuiIO_AddMouseSourceEvent(self, source)
    }
    #[inline]
    pub unsafe fn AddMouseViewportEvent(&mut self, id: ImGuiID) {
        ImGuiIO_AddMouseViewportEvent(self, id)
    }
    #[inline]
    pub unsafe fn AddFocusEvent(&mut self, focused: bool) {
        ImGuiIO_AddFocusEvent(self, focused)
    }
    #[inline]
    pub unsafe fn AddInputCharacter(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiIO_AddInputCharacter(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharacterUTF16(&mut self, c: ImWchar16) {
        ImGuiIO_AddInputCharacterUTF16(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharactersUTF8(&mut self, str_: *const ::std::os::raw::c_char) {
        ImGuiIO_AddInputCharactersUTF8(self, str_)
    }
    #[inline]
    pub unsafe fn SetKeyEventNativeData(
        &mut self,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    ) {
        ImGuiIO_SetKeyEventNativeData(
            self,
            key,
            native_keycode,
            native_scancode,
            native_legacy_index,
        )
    }
    #[inline]
    pub unsafe fn SetAppAcceptingEvents(&mut self, accepting_events: bool) {
        ImGuiIO_SetAppAcceptingEvents(self, accepting_events)
    }
    #[inline]
    pub unsafe fn ClearEventsQueue(&mut self) {
        ImGuiIO_ClearEventsQueue(self)
    }
    #[inline]
    pub unsafe fn ClearInputKeys(&mut self) {
        ImGuiIO_ClearInputKeys(self)
    }
    #[inline]
    pub unsafe fn ClearInputMouse(&mut self) {
        ImGuiIO_ClearInputMouse(self)
    }
    #[inline]
    pub unsafe fn ClearInputCharacters(&mut self) {
        ImGuiIO_ClearInputCharacters(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiIO_ImGuiIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextCallbackData"]
        [::std::mem::size_of::<ImGuiInputTextCallbackData>() - 64usize];
    ["Alignment of ImGuiInputTextCallbackData"]
        [::std::mem::align_of::<ImGuiInputTextCallbackData>() - 8usize];
    ["Offset of field: ImGuiInputTextCallbackData::Ctx"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Ctx) - 0usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventFlag"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventFlag) - 8usize];
    ["Offset of field: ImGuiInputTextCallbackData::Flags"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Flags) - 12usize];
    ["Offset of field: ImGuiInputTextCallbackData::UserData"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, UserData) - 16usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventChar"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventChar) - 24usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventKey"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventKey) - 28usize];
    ["Offset of field: ImGuiInputTextCallbackData::Buf"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Buf) - 32usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufTextLen"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufTextLen) - 40usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufSize"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufSize) - 44usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufDirty"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufDirty) - 48usize];
    ["Offset of field: ImGuiInputTextCallbackData::CursorPos"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, CursorPos) - 52usize];
    ["Offset of field: ImGuiInputTextCallbackData::SelectionStart"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, SelectionStart) - 56usize];
    ["Offset of field: ImGuiInputTextCallbackData::SelectionEnd"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, SelectionEnd) - 60usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiInputTextCallbackData11DeleteCharsEii"]
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiInputTextCallbackData11InsertCharsEiPKcS1_"]
    pub fn ImGuiInputTextCallbackData_InsertChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiInputTextCallbackDataC1Ev"]
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(
        this: *mut ImGuiInputTextCallbackData,
    );
}
impl ImGuiInputTextCallbackData {
    #[inline]
    pub unsafe fn DeleteChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    ) {
        ImGuiInputTextCallbackData_DeleteChars(self, pos, bytes_count)
    }
    #[inline]
    pub unsafe fn InsertChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiInputTextCallbackData_InsertChars(self, pos, text, text_end)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSizeCallbackData"][::std::mem::size_of::<ImGuiSizeCallbackData>() - 32usize];
    ["Alignment of ImGuiSizeCallbackData"]
        [::std::mem::align_of::<ImGuiSizeCallbackData>() - 8usize];
    ["Offset of field: ImGuiSizeCallbackData::UserData"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, UserData) - 0usize];
    ["Offset of field: ImGuiSizeCallbackData::Pos"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, Pos) - 8usize];
    ["Offset of field: ImGuiSizeCallbackData::CurrentSize"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, CurrentSize) - 16usize];
    ["Offset of field: ImGuiSizeCallbackData::DesiredSize"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, DesiredSize) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub FocusRouteParentWindowId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowClass"][::std::mem::size_of::<ImGuiWindowClass>() - 32usize];
    ["Alignment of ImGuiWindowClass"][::std::mem::align_of::<ImGuiWindowClass>() - 4usize];
    ["Offset of field: ImGuiWindowClass::ClassId"]
        [::std::mem::offset_of!(ImGuiWindowClass, ClassId) - 0usize];
    ["Offset of field: ImGuiWindowClass::ParentViewportId"]
        [::std::mem::offset_of!(ImGuiWindowClass, ParentViewportId) - 4usize];
    ["Offset of field: ImGuiWindowClass::FocusRouteParentWindowId"]
        [::std::mem::offset_of!(ImGuiWindowClass, FocusRouteParentWindowId) - 8usize];
    ["Offset of field: ImGuiWindowClass::ViewportFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, ViewportFlagsOverrideSet) - 12usize];
    ["Offset of field: ImGuiWindowClass::ViewportFlagsOverrideClear"]
        [::std::mem::offset_of!(ImGuiWindowClass, ViewportFlagsOverrideClear) - 16usize];
    ["Offset of field: ImGuiWindowClass::TabItemFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, TabItemFlagsOverrideSet) - 20usize];
    ["Offset of field: ImGuiWindowClass::DockNodeFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockNodeFlagsOverrideSet) - 24usize];
    ["Offset of field: ImGuiWindowClass::DockingAlwaysTabBar"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockingAlwaysTabBar) - 28usize];
    ["Offset of field: ImGuiWindowClass::DockingAllowUnclassed"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockingAllowUnclassed) - 29usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPayload"][::std::mem::size_of::<ImGuiPayload>() - 64usize];
    ["Alignment of ImGuiPayload"][::std::mem::align_of::<ImGuiPayload>() - 8usize];
    ["Offset of field: ImGuiPayload::Data"][::std::mem::offset_of!(ImGuiPayload, Data) - 0usize];
    ["Offset of field: ImGuiPayload::DataSize"]
        [::std::mem::offset_of!(ImGuiPayload, DataSize) - 8usize];
    ["Offset of field: ImGuiPayload::SourceId"]
        [::std::mem::offset_of!(ImGuiPayload, SourceId) - 12usize];
    ["Offset of field: ImGuiPayload::SourceParentId"]
        [::std::mem::offset_of!(ImGuiPayload, SourceParentId) - 16usize];
    ["Offset of field: ImGuiPayload::DataFrameCount"]
        [::std::mem::offset_of!(ImGuiPayload, DataFrameCount) - 20usize];
    ["Offset of field: ImGuiPayload::DataType"]
        [::std::mem::offset_of!(ImGuiPayload, DataType) - 24usize];
    ["Offset of field: ImGuiPayload::Preview"]
        [::std::mem::offset_of!(ImGuiPayload, Preview) - 57usize];
    ["Offset of field: ImGuiPayload::Delivery"]
        [::std::mem::offset_of!(ImGuiPayload, Delivery) - 58usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOnceUponAFrame"][::std::mem::size_of::<ImGuiOnceUponAFrame>() - 4usize];
    ["Alignment of ImGuiOnceUponAFrame"][::std::mem::align_of::<ImGuiOnceUponAFrame>() - 4usize];
    ["Offset of field: ImGuiOnceUponAFrame::RefFrame"]
        [::std::mem::offset_of!(ImGuiOnceUponAFrame, RefFrame) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector<ImGuiTextFilter_ImGuiTextRange>,
    pub CountGrep: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter_ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextFilter_ImGuiTextRange"]
        [::std::mem::size_of::<ImGuiTextFilter_ImGuiTextRange>() - 16usize];
    ["Alignment of ImGuiTextFilter_ImGuiTextRange"]
        [::std::mem::align_of::<ImGuiTextFilter_ImGuiTextRange>() - 8usize];
    ["Offset of field: ImGuiTextFilter_ImGuiTextRange::b"]
        [::std::mem::offset_of!(ImGuiTextFilter_ImGuiTextRange, b) - 0usize];
    ["Offset of field: ImGuiTextFilter_ImGuiTextRange::e"]
        [::std::mem::offset_of!(ImGuiTextFilter_ImGuiTextRange, e) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E"]
    pub fn ImGuiTextFilter_ImGuiTextRange_split(
        this: *const ImGuiTextFilter_ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    );
}
impl ImGuiTextFilter_ImGuiTextRange {
    #[inline]
    pub unsafe fn split(
        &self,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    ) {
        ImGuiTextFilter_ImGuiTextRange_split(self, separator, out)
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextFilter"][::std::mem::size_of::<ImGuiTextFilter>() - 280usize];
    ["Alignment of ImGuiTextFilter"][::std::mem::align_of::<ImGuiTextFilter>() - 8usize];
    ["Offset of field: ImGuiTextFilter::InputBuf"]
        [::std::mem::offset_of!(ImGuiTextFilter, InputBuf) - 0usize];
    ["Offset of field: ImGuiTextFilter::Filters"]
        [::std::mem::offset_of!(ImGuiTextFilter, Filters) - 256usize];
    ["Offset of field: ImGuiTextFilter::CountGrep"]
        [::std::mem::offset_of!(ImGuiTextFilter, CountGrep) - 272usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextFilter4DrawEPKcf"]
    pub fn ImGuiTextFilter_Draw(
        this: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK15ImGuiTextFilter10PassFilterEPKcS1_"]
    pub fn ImGuiTextFilter_PassFilter(
        this: *const ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextFilter5BuildEv"]
    pub fn ImGuiTextFilter_Build(this: *mut ImGuiTextFilter);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextFilterC1EPKc"]
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        this: *mut ImGuiTextFilter,
        default_filter: *const ::std::os::raw::c_char,
    );
}
impl ImGuiTextFilter {
    #[inline]
    pub unsafe fn Draw(&mut self, label: *const ::std::os::raw::c_char, width: f32) -> bool {
        ImGuiTextFilter_Draw(self, label, width)
    }
    #[inline]
    pub unsafe fn PassFilter(
        &self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool {
        ImGuiTextFilter_PassFilter(self, text, text_end)
    }
    #[inline]
    pub unsafe fn Build(&mut self) {
        ImGuiTextFilter_Build(self)
    }
    #[inline]
    pub unsafe fn new(default_filter: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTextFilter_ImGuiTextFilter(__bindgen_tmp.as_mut_ptr(), default_filter);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextBuffer11EmptyStringE"]
    pub static mut ImGuiTextBuffer_EmptyString: [::std::os::raw::c_char; 1usize];
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextBuffer"][::std::mem::size_of::<ImGuiTextBuffer>() - 16usize];
    ["Alignment of ImGuiTextBuffer"][::std::mem::align_of::<ImGuiTextBuffer>() - 8usize];
    ["Offset of field: ImGuiTextBuffer::Buf"]
        [::std::mem::offset_of!(ImGuiTextBuffer, Buf) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextBuffer6appendEPKcS1_"]
    pub fn ImGuiTextBuffer_append(
        this: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextBuffer7appendfEPKcz"]
    pub fn ImGuiTextBuffer_appendf(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiTextBuffer8appendfvEPKcPc"]
    pub fn ImGuiTextBuffer_appendfv(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
impl ImGuiTextBuffer {
    #[inline]
    pub unsafe fn append(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiTextBuffer_append(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn appendfv(&mut self, fmt: *const ::std::os::raw::c_char, args: va_list) {
        ImGuiTextBuffer_appendfv(self, fmt, args)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStoragePair__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>() - 8usize];
    ["Alignment of ImGuiStoragePair__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>() - 8usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_i"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_i) - 0usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_f"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_f) - 0usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_p"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_p) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStoragePair"][::std::mem::size_of::<ImGuiStoragePair>() - 16usize];
    ["Alignment of ImGuiStoragePair"][::std::mem::align_of::<ImGuiStoragePair>() - 8usize];
    ["Offset of field: ImGuiStoragePair::key"]
        [::std::mem::offset_of!(ImGuiStoragePair, key) - 0usize];
};
#[repr(C)]
pub struct ImGuiStorage {
    pub Data: ImVector<ImGuiStoragePair>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStorage"][::std::mem::size_of::<ImGuiStorage>() - 16usize];
    ["Alignment of ImGuiStorage"][::std::mem::align_of::<ImGuiStorage>() - 8usize];
    ["Offset of field: ImGuiStorage::Data"][::std::mem::offset_of!(ImGuiStorage, Data) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK12ImGuiStorage6GetIntEji"]
    pub fn ImGuiStorage_GetInt(
        this: *const ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage6SetIntEji"]
    pub fn ImGuiStorage_SetInt(this: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK12ImGuiStorage7GetBoolEjb"]
    pub fn ImGuiStorage_GetBool(this: *const ImGuiStorage, key: ImGuiID, default_val: bool)
    -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage7SetBoolEjb"]
    pub fn ImGuiStorage_SetBool(this: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK12ImGuiStorage8GetFloatEjf"]
    pub fn ImGuiStorage_GetFloat(this: *const ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage8SetFloatEjf"]
    pub fn ImGuiStorage_SetFloat(this: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK12ImGuiStorage10GetVoidPtrEj"]
    pub fn ImGuiStorage_GetVoidPtr(
        this: *const ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage10SetVoidPtrEjPv"]
    pub fn ImGuiStorage_SetVoidPtr(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage9GetIntRefEji"]
    pub fn ImGuiStorage_GetIntRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage10GetBoolRefEjb"]
    pub fn ImGuiStorage_GetBoolRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage11GetFloatRefEjf"]
    pub fn ImGuiStorage_GetFloatRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage13GetVoidPtrRefEjPv"]
    pub fn ImGuiStorage_GetVoidPtrRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage14BuildSortByKeyEv"]
    pub fn ImGuiStorage_BuildSortByKey(this: *mut ImGuiStorage);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImGuiStorage9SetAllIntEi"]
    pub fn ImGuiStorage_SetAllInt(this: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
impl ImGuiStorage {
    #[inline]
    pub unsafe fn GetInt(
        &self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImGuiStorage_GetInt(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetInt(&mut self, key: ImGuiID, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetInt(self, key, val)
    }
    #[inline]
    pub unsafe fn GetBool(&self, key: ImGuiID, default_val: bool) -> bool {
        ImGuiStorage_GetBool(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetBool(&mut self, key: ImGuiID, val: bool) {
        ImGuiStorage_SetBool(self, key, val)
    }
    #[inline]
    pub unsafe fn GetFloat(&self, key: ImGuiID, default_val: f32) -> f32 {
        ImGuiStorage_GetFloat(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetFloat(&mut self, key: ImGuiID, val: f32) {
        ImGuiStorage_SetFloat(self, key, val)
    }
    #[inline]
    pub unsafe fn GetVoidPtr(&self, key: ImGuiID) -> *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtr(self, key)
    }
    #[inline]
    pub unsafe fn SetVoidPtr(&mut self, key: ImGuiID, val: *mut ::std::os::raw::c_void) {
        ImGuiStorage_SetVoidPtr(self, key, val)
    }
    #[inline]
    pub unsafe fn GetIntRef(
        &mut self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int {
        ImGuiStorage_GetIntRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetBoolRef(&mut self, key: ImGuiID, default_val: bool) -> *mut bool {
        ImGuiStorage_GetBoolRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetFloatRef(&mut self, key: ImGuiID, default_val: f32) -> *mut f32 {
        ImGuiStorage_GetFloatRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetVoidPtrRef(
        &mut self,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtrRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn BuildSortByKey(&mut self) {
        ImGuiStorage_BuildSortByKey(self)
    }
    #[inline]
    pub unsafe fn SetAllInt(&mut self, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetAllInt(self, val)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f64,
    pub StartSeekOffsetY: f64,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipper"][::std::mem::size_of::<ImGuiListClipper>() - 48usize];
    ["Alignment of ImGuiListClipper"][::std::mem::align_of::<ImGuiListClipper>() - 8usize];
    ["Offset of field: ImGuiListClipper::Ctx"]
        [::std::mem::offset_of!(ImGuiListClipper, Ctx) - 0usize];
    ["Offset of field: ImGuiListClipper::DisplayStart"]
        [::std::mem::offset_of!(ImGuiListClipper, DisplayStart) - 8usize];
    ["Offset of field: ImGuiListClipper::DisplayEnd"]
        [::std::mem::offset_of!(ImGuiListClipper, DisplayEnd) - 12usize];
    ["Offset of field: ImGuiListClipper::ItemsCount"]
        [::std::mem::offset_of!(ImGuiListClipper, ItemsCount) - 16usize];
    ["Offset of field: ImGuiListClipper::ItemsHeight"]
        [::std::mem::offset_of!(ImGuiListClipper, ItemsHeight) - 20usize];
    ["Offset of field: ImGuiListClipper::StartPosY"]
        [::std::mem::offset_of!(ImGuiListClipper, StartPosY) - 24usize];
    ["Offset of field: ImGuiListClipper::StartSeekOffsetY"]
        [::std::mem::offset_of!(ImGuiListClipper, StartSeekOffsetY) - 32usize];
    ["Offset of field: ImGuiListClipper::TempData"]
        [::std::mem::offset_of!(ImGuiListClipper, TempData) - 40usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipper5BeginEif"]
    pub fn ImGuiListClipper_Begin(
        this: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipper3EndEv"]
    pub fn ImGuiListClipper_End(this: *mut ImGuiListClipper);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipper4StepEv"]
    pub fn ImGuiListClipper_Step(this: *mut ImGuiListClipper) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipper19IncludeItemsByIndexEii"]
    pub fn ImGuiListClipper_IncludeItemsByIndex(
        this: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipper17SeekCursorForItemEi"]
    pub fn ImGuiListClipper_SeekCursorForItem(
        this: *mut ImGuiListClipper,
        item_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipperC1Ev"]
    pub fn ImGuiListClipper_ImGuiListClipper(this: *mut ImGuiListClipper);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN16ImGuiListClipperD1Ev"]
    pub fn ImGuiListClipper_ImGuiListClipper_destructor(this: *mut ImGuiListClipper);
}
impl ImGuiListClipper {
    #[inline]
    pub unsafe fn Begin(&mut self, items_count: ::std::os::raw::c_int, items_height: f32) {
        ImGuiListClipper_Begin(self, items_count, items_height)
    }
    #[inline]
    pub unsafe fn End(&mut self) {
        ImGuiListClipper_End(self)
    }
    #[inline]
    pub unsafe fn Step(&mut self) -> bool {
        ImGuiListClipper_Step(self)
    }
    #[inline]
    pub unsafe fn IncludeItemsByIndex(
        &mut self,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    ) {
        ImGuiListClipper_IncludeItemsByIndex(self, item_begin, item_end)
    }
    #[inline]
    pub unsafe fn SeekCursorForItem(&mut self, item_index: ::std::os::raw::c_int) {
        ImGuiListClipper_SeekCursorForItem(self, item_index)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiListClipper_ImGuiListClipper(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiListClipper_ImGuiListClipper_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImColor"][::std::mem::size_of::<ImColor>() - 16usize];
    ["Alignment of ImColor"][::std::mem::align_of::<ImColor>() - 4usize];
    ["Offset of field: ImColor::Value"][::std::mem::offset_of!(ImColor, Value) - 0usize];
};
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_None: ImGuiMultiSelectFlags_ = 0;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SingleSelect: ImGuiMultiSelectFlags_ = 1;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoSelectAll: ImGuiMultiSelectFlags_ = 2;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoRangeSelect: ImGuiMultiSelectFlags_ = 4;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoSelect: ImGuiMultiSelectFlags_ = 8;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoClear: ImGuiMultiSelectFlags_ = 16;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoClearOnReselect:
    ImGuiMultiSelectFlags_ = 32;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelect1d: ImGuiMultiSelectFlags_ = 64;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelect2d: ImGuiMultiSelectFlags_ = 128;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelectNoScroll: ImGuiMultiSelectFlags_ =
    256;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ClearOnEscape: ImGuiMultiSelectFlags_ = 512;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ClearOnClickVoid: ImGuiMultiSelectFlags_ =
    1024;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ScopeWindow: ImGuiMultiSelectFlags_ = 2048;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ScopeRect: ImGuiMultiSelectFlags_ = 4096;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SelectOnClick: ImGuiMultiSelectFlags_ = 8192;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SelectOnClickRelease:
    ImGuiMultiSelectFlags_ = 16384;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NavWrapX: ImGuiMultiSelectFlags_ = 65536;
pub type ImGuiMultiSelectFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiMultiSelectIO {
    pub Requests: ImVector<ImGuiSelectionRequest>,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
    pub NavIdSelected: bool,
    pub RangeSrcReset: bool,
    pub ItemsCount: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMultiSelectIO"][::std::mem::size_of::<ImGuiMultiSelectIO>() - 40usize];
    ["Alignment of ImGuiMultiSelectIO"][::std::mem::align_of::<ImGuiMultiSelectIO>() - 8usize];
    ["Offset of field: ImGuiMultiSelectIO::Requests"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, Requests) - 0usize];
    ["Offset of field: ImGuiMultiSelectIO::RangeSrcItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, RangeSrcItem) - 16usize];
    ["Offset of field: ImGuiMultiSelectIO::NavIdItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, NavIdItem) - 24usize];
    ["Offset of field: ImGuiMultiSelectIO::NavIdSelected"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, NavIdSelected) - 32usize];
    ["Offset of field: ImGuiMultiSelectIO::RangeSrcReset"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, RangeSrcReset) - 33usize];
    ["Offset of field: ImGuiMultiSelectIO::ItemsCount"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, ItemsCount) - 36usize];
};
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_None: ImGuiSelectionRequestType = 0;
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_SetAll: ImGuiSelectionRequestType = 1;
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_SetRange: ImGuiSelectionRequestType =
    2;
pub type ImGuiSelectionRequestType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSelectionRequest {
    pub Type: ImGuiSelectionRequestType,
    pub Selected: bool,
    pub RangeDirection: ImS8,
    pub RangeFirstItem: ImGuiSelectionUserData,
    pub RangeLastItem: ImGuiSelectionUserData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSelectionRequest"][::std::mem::size_of::<ImGuiSelectionRequest>() - 24usize];
    ["Alignment of ImGuiSelectionRequest"]
        [::std::mem::align_of::<ImGuiSelectionRequest>() - 8usize];
    ["Offset of field: ImGuiSelectionRequest::Type"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, Type) - 0usize];
    ["Offset of field: ImGuiSelectionRequest::Selected"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, Selected) - 4usize];
    ["Offset of field: ImGuiSelectionRequest::RangeDirection"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, RangeDirection) - 5usize];
    ["Offset of field: ImGuiSelectionRequest::RangeFirstItem"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, RangeFirstItem) - 8usize];
    ["Offset of field: ImGuiSelectionRequest::RangeLastItem"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, RangeLastItem) - 16usize];
};
#[repr(C)]
pub struct ImGuiSelectionBasicStorage {
    pub Size: ::std::os::raw::c_int,
    pub PreserveOrder: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterIndexToStorageId: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ImGuiSelectionBasicStorage,
            idx: ::std::os::raw::c_int,
        ) -> ImGuiID,
    >,
    pub _SelectionOrder: ::std::os::raw::c_int,
    pub _Storage: ImGuiStorage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSelectionBasicStorage"]
        [::std::mem::size_of::<ImGuiSelectionBasicStorage>() - 48usize];
    ["Alignment of ImGuiSelectionBasicStorage"]
        [::std::mem::align_of::<ImGuiSelectionBasicStorage>() - 8usize];
    ["Offset of field: ImGuiSelectionBasicStorage::Size"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, Size) - 0usize];
    ["Offset of field: ImGuiSelectionBasicStorage::PreserveOrder"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, PreserveOrder) - 4usize];
    ["Offset of field: ImGuiSelectionBasicStorage::UserData"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, UserData) - 8usize];
    ["Offset of field: ImGuiSelectionBasicStorage::AdapterIndexToStorageId"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, AdapterIndexToStorageId) - 16usize];
    ["Offset of field: ImGuiSelectionBasicStorage::_SelectionOrder"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, _SelectionOrder) - 24usize];
    ["Offset of field: ImGuiSelectionBasicStorage::_Storage"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, _Storage) - 32usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiSelectionBasicStorage13ApplyRequestsEP18ImGuiMultiSelectIO"]
    pub fn ImGuiSelectionBasicStorage_ApplyRequests(
        this: *mut ImGuiSelectionBasicStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK26ImGuiSelectionBasicStorage8ContainsEj"]
    pub fn ImGuiSelectionBasicStorage_Contains(
        this: *const ImGuiSelectionBasicStorage,
        id: ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiSelectionBasicStorage5ClearEv"]
    pub fn ImGuiSelectionBasicStorage_Clear(this: *mut ImGuiSelectionBasicStorage);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiSelectionBasicStorage4SwapERS_"]
    pub fn ImGuiSelectionBasicStorage_Swap(
        this: *mut ImGuiSelectionBasicStorage,
        r: *mut ImGuiSelectionBasicStorage,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiSelectionBasicStorage15SetItemSelectedEjb"]
    pub fn ImGuiSelectionBasicStorage_SetItemSelected(
        this: *mut ImGuiSelectionBasicStorage,
        id: ImGuiID,
        selected: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiSelectionBasicStorage19GetNextSelectedItemEPPvPj"]
    pub fn ImGuiSelectionBasicStorage_GetNextSelectedItem(
        this: *mut ImGuiSelectionBasicStorage,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN26ImGuiSelectionBasicStorageC1Ev"]
    pub fn ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(
        this: *mut ImGuiSelectionBasicStorage,
    );
}
impl ImGuiSelectionBasicStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionBasicStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn Contains(&self, id: ImGuiID) -> bool {
        ImGuiSelectionBasicStorage_Contains(self, id)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImGuiSelectionBasicStorage_Clear(self)
    }
    #[inline]
    pub unsafe fn Swap(&mut self, r: *mut ImGuiSelectionBasicStorage) {
        ImGuiSelectionBasicStorage_Swap(self, r)
    }
    #[inline]
    pub unsafe fn SetItemSelected(&mut self, id: ImGuiID, selected: bool) {
        ImGuiSelectionBasicStorage_SetItemSelected(self, id, selected)
    }
    #[inline]
    pub unsafe fn GetNextSelectedItem(
        &mut self,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool {
        ImGuiSelectionBasicStorage_GetNextSelectedItem(self, opaque_it, out_id)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSelectionExternalStorage {
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterSetItemSelected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ImGuiSelectionExternalStorage,
            idx: ::std::os::raw::c_int,
            selected: bool,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSelectionExternalStorage"]
        [::std::mem::size_of::<ImGuiSelectionExternalStorage>() - 16usize];
    ["Alignment of ImGuiSelectionExternalStorage"]
        [::std::mem::align_of::<ImGuiSelectionExternalStorage>() - 8usize];
    ["Offset of field: ImGuiSelectionExternalStorage::UserData"]
        [::std::mem::offset_of!(ImGuiSelectionExternalStorage, UserData) - 0usize];
    ["Offset of field: ImGuiSelectionExternalStorage::AdapterSetItemSelected"]
        [::std::mem::offset_of!(ImGuiSelectionExternalStorage, AdapterSetItemSelected) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN29ImGuiSelectionExternalStorage13ApplyRequestsEP18ImGuiMultiSelectIO"]
    pub fn ImGuiSelectionExternalStorage_ApplyRequests(
        this: *mut ImGuiSelectionExternalStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN29ImGuiSelectionExternalStorageC1Ev"]
    pub fn ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(
        this: *mut ImGuiSelectionExternalStorage,
    );
}
impl ImGuiSelectionExternalStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionExternalStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TexRef: ImTextureRef,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
    pub UserCallbackDataSize: ::std::os::raw::c_int,
    pub UserCallbackDataOffset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawCmd"][::std::mem::size_of::<ImDrawCmd>() - 72usize];
    ["Alignment of ImDrawCmd"][::std::mem::align_of::<ImDrawCmd>() - 8usize];
    ["Offset of field: ImDrawCmd::ClipRect"][::std::mem::offset_of!(ImDrawCmd, ClipRect) - 0usize];
    ["Offset of field: ImDrawCmd::TexRef"][::std::mem::offset_of!(ImDrawCmd, TexRef) - 16usize];
    ["Offset of field: ImDrawCmd::VtxOffset"]
        [::std::mem::offset_of!(ImDrawCmd, VtxOffset) - 32usize];
    ["Offset of field: ImDrawCmd::IdxOffset"]
        [::std::mem::offset_of!(ImDrawCmd, IdxOffset) - 36usize];
    ["Offset of field: ImDrawCmd::ElemCount"]
        [::std::mem::offset_of!(ImDrawCmd, ElemCount) - 40usize];
    ["Offset of field: ImDrawCmd::UserCallback"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallback) - 48usize];
    ["Offset of field: ImDrawCmd::UserCallbackData"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackData) - 56usize];
    ["Offset of field: ImDrawCmd::UserCallbackDataSize"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackDataSize) - 64usize];
    ["Offset of field: ImDrawCmd::UserCallbackDataOffset"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackDataOffset) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawVert"][::std::mem::size_of::<ImDrawVert>() - 20usize];
    ["Alignment of ImDrawVert"][::std::mem::align_of::<ImDrawVert>() - 4usize];
    ["Offset of field: ImDrawVert::pos"][::std::mem::offset_of!(ImDrawVert, pos) - 0usize];
    ["Offset of field: ImDrawVert::uv"][::std::mem::offset_of!(ImDrawVert, uv) - 8usize];
    ["Offset of field: ImDrawVert::col"][::std::mem::offset_of!(ImDrawVert, col) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TexRef: ImTextureRef,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawCmdHeader"][::std::mem::size_of::<ImDrawCmdHeader>() - 40usize];
    ["Alignment of ImDrawCmdHeader"][::std::mem::align_of::<ImDrawCmdHeader>() - 8usize];
    ["Offset of field: ImDrawCmdHeader::ClipRect"]
        [::std::mem::offset_of!(ImDrawCmdHeader, ClipRect) - 0usize];
    ["Offset of field: ImDrawCmdHeader::TexRef"]
        [::std::mem::offset_of!(ImDrawCmdHeader, TexRef) - 16usize];
    ["Offset of field: ImDrawCmdHeader::VtxOffset"]
        [::std::mem::offset_of!(ImDrawCmdHeader, VtxOffset) - 32usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector<ImDrawCmd>,
    pub _IdxBuffer: ImVector<ImDrawIdx>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawChannel"][::std::mem::size_of::<ImDrawChannel>() - 32usize];
    ["Alignment of ImDrawChannel"][::std::mem::align_of::<ImDrawChannel>() - 8usize];
    ["Offset of field: ImDrawChannel::_CmdBuffer"]
        [::std::mem::offset_of!(ImDrawChannel, _CmdBuffer) - 0usize];
    ["Offset of field: ImDrawChannel::_IdxBuffer"]
        [::std::mem::offset_of!(ImDrawChannel, _IdxBuffer) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector<ImDrawChannel>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawListSplitter"][::std::mem::size_of::<ImDrawListSplitter>() - 24usize];
    ["Alignment of ImDrawListSplitter"][::std::mem::align_of::<ImDrawListSplitter>() - 8usize];
    ["Offset of field: ImDrawListSplitter::_Current"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Current) - 0usize];
    ["Offset of field: ImDrawListSplitter::_Count"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Count) - 4usize];
    ["Offset of field: ImDrawListSplitter::_Channels"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Channels) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN18ImDrawListSplitter15ClearFreeMemoryEv"]
    pub fn ImDrawListSplitter_ClearFreeMemory(this: *mut ImDrawListSplitter);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN18ImDrawListSplitter5SplitEP10ImDrawListi"]
    pub fn ImDrawListSplitter_Split(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN18ImDrawListSplitter5MergeEP10ImDrawList"]
    pub fn ImDrawListSplitter_Merge(this: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN18ImDrawListSplitter17SetCurrentChannelEP10ImDrawListi"]
    pub fn ImDrawListSplitter_SetCurrentChannel(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
impl ImDrawListSplitter {
    #[inline]
    pub unsafe fn ClearFreeMemory(&mut self) {
        ImDrawListSplitter_ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn Split(&mut self, draw_list: *mut ImDrawList, count: ::std::os::raw::c_int) {
        ImDrawListSplitter_Split(self, draw_list, count)
    }
    #[inline]
    pub unsafe fn Merge(&mut self, draw_list: *mut ImDrawList) {
        ImDrawListSplitter_Merge(self, draw_list)
    }
    #[inline]
    pub unsafe fn SetCurrentChannel(
        &mut self,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    ) {
        ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)
    }
}
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_uint;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector<ImDrawCmd>,
    pub IdxBuffer: ImVector<ImDrawIdx>,
    pub VtxBuffer: ImVector<ImDrawVert>,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _Path: ImVector<ImVec2>,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _ClipRectStack: ImVector<ImVec4>,
    pub _TextureStack: ImVector<ImTextureRef>,
    pub _CallbacksDataBuf: ImVector<ImU8>,
    pub _FringeScale: f32,
    pub _OwnerName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawList"][::std::mem::size_of::<ImDrawList>() - 224usize];
    ["Alignment of ImDrawList"][::std::mem::align_of::<ImDrawList>() - 8usize];
    ["Offset of field: ImDrawList::CmdBuffer"]
        [::std::mem::offset_of!(ImDrawList, CmdBuffer) - 0usize];
    ["Offset of field: ImDrawList::IdxBuffer"]
        [::std::mem::offset_of!(ImDrawList, IdxBuffer) - 16usize];
    ["Offset of field: ImDrawList::VtxBuffer"]
        [::std::mem::offset_of!(ImDrawList, VtxBuffer) - 32usize];
    ["Offset of field: ImDrawList::Flags"][::std::mem::offset_of!(ImDrawList, Flags) - 48usize];
    ["Offset of field: ImDrawList::_VtxCurrentIdx"]
        [::std::mem::offset_of!(ImDrawList, _VtxCurrentIdx) - 52usize];
    ["Offset of field: ImDrawList::_Data"][::std::mem::offset_of!(ImDrawList, _Data) - 56usize];
    ["Offset of field: ImDrawList::_VtxWritePtr"]
        [::std::mem::offset_of!(ImDrawList, _VtxWritePtr) - 64usize];
    ["Offset of field: ImDrawList::_IdxWritePtr"]
        [::std::mem::offset_of!(ImDrawList, _IdxWritePtr) - 72usize];
    ["Offset of field: ImDrawList::_Path"][::std::mem::offset_of!(ImDrawList, _Path) - 80usize];
    ["Offset of field: ImDrawList::_CmdHeader"]
        [::std::mem::offset_of!(ImDrawList, _CmdHeader) - 96usize];
    ["Offset of field: ImDrawList::_Splitter"]
        [::std::mem::offset_of!(ImDrawList, _Splitter) - 136usize];
    ["Offset of field: ImDrawList::_ClipRectStack"]
        [::std::mem::offset_of!(ImDrawList, _ClipRectStack) - 160usize];
    ["Offset of field: ImDrawList::_TextureStack"]
        [::std::mem::offset_of!(ImDrawList, _TextureStack) - 176usize];
    ["Offset of field: ImDrawList::_CallbacksDataBuf"]
        [::std::mem::offset_of!(ImDrawList, _CallbacksDataBuf) - 192usize];
    ["Offset of field: ImDrawList::_FringeScale"]
        [::std::mem::offset_of!(ImDrawList, _FringeScale) - 208usize];
    ["Offset of field: ImDrawList::_OwnerName"]
        [::std::mem::offset_of!(ImDrawList, _OwnerName) - 216usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList12PushClipRectERK6ImVec2S2_b"]
    pub fn ImDrawList_PushClipRect(
        this: *mut ImDrawList,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList22PushClipRectFullScreenEv"]
    pub fn ImDrawList_PushClipRectFullScreen(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11PopClipRectEv"]
    pub fn ImDrawList_PopClipRect(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11PushTextureE12ImTextureRef"]
    pub fn ImDrawList_PushTexture(this: *mut ImDrawList, tex_ref: ImTextureRef);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList10PopTextureEv"]
    pub fn ImDrawList_PopTexture(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList7AddLineERK6ImVec2S2_jf"]
    pub fn ImDrawList_AddLine(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList7AddRectERK6ImVec2S2_jfif"]
    pub fn ImDrawList_AddRect(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi"]
    pub fn ImDrawList_AddRectFilled(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj"]
    pub fn ImDrawList_AddRectFilledMultiColor(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf"]
    pub fn ImDrawList_AddQuad(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_AddQuadFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf"]
    pub fn ImDrawList_AddTriangle(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j"]
    pub fn ImDrawList_AddTriangleFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList9AddCircleERK6ImVec2fjif"]
    pub fn ImDrawList_AddCircle(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList15AddCircleFilledERK6ImVec2fji"]
    pub fn ImDrawList_AddCircleFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList7AddNgonERK6ImVec2fjif"]
    pub fn ImDrawList_AddNgon(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList13AddNgonFilledERK6ImVec2fji"]
    pub fn ImDrawList_AddNgonFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList10AddEllipseERK6ImVec2S2_jfif"]
    pub fn ImDrawList_AddEllipse(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList16AddEllipseFilledERK6ImVec2S2_jfi"]
    pub fn ImDrawList_AddEllipseFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_"]
    pub fn ImDrawList_AddText(
        this: *mut ImDrawList,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList7AddTextEP6ImFontfRK6ImVec2jPKcS6_fPK6ImVec4"]
    pub fn ImDrawList_AddText1(
        this: *mut ImDrawList,
        font: *mut ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList14AddBezierCubicERK6ImVec2S2_S2_S2_jfi"]
    pub fn ImDrawList_AddBezierCubic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList18AddBezierQuadraticERK6ImVec2S2_S2_jfi"]
    pub fn ImDrawList_AddBezierQuadratic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11AddPolylineEPK6ImVec2ijif"]
    pub fn ImDrawList_AddPolyline(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij"]
    pub fn ImDrawList_AddConvexPolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList20AddConcavePolyFilledEPK6ImVec2ij"]
    pub fn ImDrawList_AddConcavePolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList8AddImageE12ImTextureRefRK6ImVec2S3_S3_S3_j"]
    pub fn ImDrawList_AddImage(
        this: *mut ImDrawList,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList12AddImageQuadE12ImTextureRefRK6ImVec2S3_S3_S3_S3_S3_S3_S3_j"]
    pub fn ImDrawList_AddImageQuad(
        this: *mut ImDrawList,
        tex_ref: ImTextureRef,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList15AddImageRoundedE12ImTextureRefRK6ImVec2S3_S3_S3_jfi"]
    pub fn ImDrawList_AddImageRounded(
        this: *mut ImDrawList,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList9PathArcToERK6ImVec2fffi"]
    pub fn ImDrawList_PathArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList13PathArcToFastERK6ImVec2fii"]
    pub fn ImDrawList_PathArcToFast(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList19PathEllipticalArcToERK6ImVec2S2_fffi"]
    pub fn ImDrawList_PathEllipticalArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList22PathBezierCubicCurveToERK6ImVec2S2_S2_i"]
    pub fn ImDrawList_PathBezierCubicCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList26PathBezierQuadraticCurveToERK6ImVec2S2_i"]
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList8PathRectERK6ImVec2S2_fi"]
    pub fn ImDrawList_PathRect(
        this: *mut ImDrawList,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPvm"]
    pub fn ImDrawList_AddCallback(
        this: *mut ImDrawList,
        callback: ImDrawCallback,
        userdata: *mut ::std::os::raw::c_void,
        userdata_size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList10AddDrawCmdEv"]
    pub fn ImDrawList_AddDrawCmd(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK10ImDrawList11CloneOutputEv"]
    pub fn ImDrawList_CloneOutput(this: *const ImDrawList) -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11PrimReserveEii"]
    pub fn ImDrawList_PrimReserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList13PrimUnreserveEii"]
    pub fn ImDrawList_PrimUnreserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList8PrimRectERK6ImVec2S2_j"]
    pub fn ImDrawList_PrimRect(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_PrimRectUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j"]
    pub fn ImDrawList_PrimQuadUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList22_SetDrawListSharedDataEP20ImDrawListSharedData"]
    pub fn ImDrawList__SetDrawListSharedData(
        this: *mut ImDrawList,
        data: *mut ImDrawListSharedData,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList17_ResetForNewFrameEv"]
    pub fn ImDrawList__ResetForNewFrame(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList16_ClearFreeMemoryEv"]
    pub fn ImDrawList__ClearFreeMemory(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList17_PopUnusedDrawCmdEv"]
    pub fn ImDrawList__PopUnusedDrawCmd(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList17_TryMergeDrawCmdsEv"]
    pub fn ImDrawList__TryMergeDrawCmds(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList18_OnChangedClipRectEv"]
    pub fn ImDrawList__OnChangedClipRect(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList17_OnChangedTextureEv"]
    pub fn ImDrawList__OnChangedTexture(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList19_OnChangedVtxOffsetEv"]
    pub fn ImDrawList__OnChangedVtxOffset(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11_SetTextureE12ImTextureRef"]
    pub fn ImDrawList__SetTexture(this: *mut ImDrawList, tex_ref: ImTextureRef);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK10ImDrawList27_CalcCircleAutoSegmentCountEf"]
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        this: *const ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList16_PathArcToFastExERK6ImVec2fiii"]
    pub fn ImDrawList__PathArcToFastEx(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawList11_PathArcToNERK6ImVec2fffi"]
    pub fn ImDrawList__PathArcToN(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawListC1EP20ImDrawListSharedData"]
    pub fn ImDrawList_ImDrawList(this: *mut ImDrawList, shared_data: *mut ImDrawListSharedData);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawListD1Ev"]
    pub fn ImDrawList_ImDrawList_destructor(this: *mut ImDrawList);
}
impl ImDrawList {
    #[inline]
    pub unsafe fn PushClipRect(
        &mut self,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    ) {
        ImDrawList_PushClipRect(
            self,
            clip_rect_min,
            clip_rect_max,
            intersect_with_current_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn PushClipRectFullScreen(&mut self) {
        ImDrawList_PushClipRectFullScreen(self)
    }
    #[inline]
    pub unsafe fn PopClipRect(&mut self) {
        ImDrawList_PopClipRect(self)
    }
    #[inline]
    pub unsafe fn PushTexture(&mut self, tex_ref: ImTextureRef) {
        ImDrawList_PushTexture(self, tex_ref)
    }
    #[inline]
    pub unsafe fn PopTexture(&mut self) {
        ImDrawList_PopTexture(self)
    }
    #[inline]
    pub unsafe fn AddLine(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddLine(self, p1, p2, col, thickness)
    }
    #[inline]
    pub unsafe fn AddRect(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddRect(self, p_min, p_max, col, rounding, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddRectFilled(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddRectFilledMultiColor(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    ) {
        ImDrawList_AddRectFilledMultiColor(
            self,
            p_min,
            p_max,
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left,
        )
    }
    #[inline]
    pub unsafe fn AddQuad(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)
    }
    #[inline]
    pub unsafe fn AddQuadFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)
    }
    #[inline]
    pub unsafe fn AddTriangle(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)
    }
    #[inline]
    pub unsafe fn AddTriangleFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)
    }
    #[inline]
    pub unsafe fn AddCircle(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddCircleFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddNgon(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddNgonFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddNgonFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddEllipse(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddEllipse(self, center, radius, col, rot, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddEllipseFilled(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddEllipseFilled(self, center, radius, col, rot, num_segments)
    }
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImDrawList_AddText(self, pos, col, text_begin, text_end)
    }
    #[inline]
    pub unsafe fn AddText1(
        &mut self,
        font: *mut ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    ) {
        ImDrawList_AddText1(
            self,
            font,
            font_size,
            pos,
            col,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn AddBezierCubic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierCubic(self, p1, p2, p3, p4, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddBezierQuadratic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierQuadratic(self, p1, p2, p3, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddPolyline(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddPolyline(self, points, num_points, col, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddConvexPolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConvexPolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddConcavePolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConcavePolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddImage(
        &mut self,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImage(self, tex_ref, p_min, p_max, uv_min, uv_max, col)
    }
    #[inline]
    pub unsafe fn AddImageQuad(
        &mut self,
        tex_ref: ImTextureRef,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImageQuad(self, tex_ref, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col)
    }
    #[inline]
    pub unsafe fn AddImageRounded(
        &mut self,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddImageRounded(
            self, tex_ref, p_min, p_max, uv_min, uv_max, col, rounding, flags,
        )
    }
    #[inline]
    pub unsafe fn PathArcTo(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathArcToFast(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)
    }
    #[inline]
    pub unsafe fn PathEllipticalArcTo(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathEllipticalArcTo(self, center, radius, rot, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierCubicCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierCubicCurveTo(self, p2, p3, p4, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierQuadraticCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments)
    }
    #[inline]
    pub unsafe fn PathRect(
        &mut self,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_PathRect(self, rect_min, rect_max, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddCallback(
        &mut self,
        callback: ImDrawCallback,
        userdata: *mut ::std::os::raw::c_void,
        userdata_size: usize,
    ) {
        ImDrawList_AddCallback(self, callback, userdata, userdata_size)
    }
    #[inline]
    pub unsafe fn AddDrawCmd(&mut self) {
        ImDrawList_AddDrawCmd(self)
    }
    #[inline]
    pub unsafe fn CloneOutput(&self) -> *mut ImDrawList {
        ImDrawList_CloneOutput(self)
    }
    #[inline]
    pub unsafe fn PrimReserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimReserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimUnreserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimUnreserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32) {
        ImDrawList_PrimRect(self, a, b, col)
    }
    #[inline]
    pub unsafe fn PrimRectUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)
    }
    #[inline]
    pub unsafe fn PrimQuadUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
    }
    #[inline]
    pub unsafe fn _SetDrawListSharedData(&mut self, data: *mut ImDrawListSharedData) {
        ImDrawList__SetDrawListSharedData(self, data)
    }
    #[inline]
    pub unsafe fn _ResetForNewFrame(&mut self) {
        ImDrawList__ResetForNewFrame(self)
    }
    #[inline]
    pub unsafe fn _ClearFreeMemory(&mut self) {
        ImDrawList__ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn _PopUnusedDrawCmd(&mut self) {
        ImDrawList__PopUnusedDrawCmd(self)
    }
    #[inline]
    pub unsafe fn _TryMergeDrawCmds(&mut self) {
        ImDrawList__TryMergeDrawCmds(self)
    }
    #[inline]
    pub unsafe fn _OnChangedClipRect(&mut self) {
        ImDrawList__OnChangedClipRect(self)
    }
    #[inline]
    pub unsafe fn _OnChangedTexture(&mut self) {
        ImDrawList__OnChangedTexture(self)
    }
    #[inline]
    pub unsafe fn _OnChangedVtxOffset(&mut self) {
        ImDrawList__OnChangedVtxOffset(self)
    }
    #[inline]
    pub unsafe fn _SetTexture(&mut self, tex_ref: ImTextureRef) {
        ImDrawList__SetTexture(self, tex_ref)
    }
    #[inline]
    pub unsafe fn _CalcCircleAutoSegmentCount(&self, radius: f32) -> ::std::os::raw::c_int {
        ImDrawList__CalcCircleAutoSegmentCount(self, radius)
    }
    #[inline]
    pub unsafe fn _PathArcToFastEx(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToFastEx(self, center, radius, a_min_sample, a_max_sample, a_step)
    }
    #[inline]
    pub unsafe fn _PathArcToN(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToN(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn new(shared_data: *mut ImDrawListSharedData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImDrawList_ImDrawList(__bindgen_tmp.as_mut_ptr(), shared_data);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImDrawList_ImDrawList_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector<*mut ImDrawList>,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
    pub Textures: *mut ImVector<*mut ImTextureData>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawData"][::std::mem::size_of::<ImDrawData>() - 72usize];
    ["Alignment of ImDrawData"][::std::mem::align_of::<ImDrawData>() - 8usize];
    ["Offset of field: ImDrawData::Valid"][::std::mem::offset_of!(ImDrawData, Valid) - 0usize];
    ["Offset of field: ImDrawData::CmdListsCount"]
        [::std::mem::offset_of!(ImDrawData, CmdListsCount) - 4usize];
    ["Offset of field: ImDrawData::TotalIdxCount"]
        [::std::mem::offset_of!(ImDrawData, TotalIdxCount) - 8usize];
    ["Offset of field: ImDrawData::TotalVtxCount"]
        [::std::mem::offset_of!(ImDrawData, TotalVtxCount) - 12usize];
    ["Offset of field: ImDrawData::CmdLists"]
        [::std::mem::offset_of!(ImDrawData, CmdLists) - 16usize];
    ["Offset of field: ImDrawData::DisplayPos"]
        [::std::mem::offset_of!(ImDrawData, DisplayPos) - 32usize];
    ["Offset of field: ImDrawData::DisplaySize"]
        [::std::mem::offset_of!(ImDrawData, DisplaySize) - 40usize];
    ["Offset of field: ImDrawData::FramebufferScale"]
        [::std::mem::offset_of!(ImDrawData, FramebufferScale) - 48usize];
    ["Offset of field: ImDrawData::OwnerViewport"]
        [::std::mem::offset_of!(ImDrawData, OwnerViewport) - 56usize];
    ["Offset of field: ImDrawData::Textures"]
        [::std::mem::offset_of!(ImDrawData, Textures) - 64usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawData5ClearEv"]
    pub fn ImDrawData_Clear(this: *mut ImDrawData);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawData11AddDrawListEP10ImDrawList"]
    pub fn ImDrawData_AddDrawList(this: *mut ImDrawData, draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawData17DeIndexAllBuffersEv"]
    pub fn ImDrawData_DeIndexAllBuffers(this: *mut ImDrawData);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN10ImDrawData14ScaleClipRectsERK6ImVec2"]
    pub fn ImDrawData_ScaleClipRects(this: *mut ImDrawData, fb_scale: *const ImVec2);
}
impl ImDrawData {
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImDrawData_Clear(self)
    }
    #[inline]
    pub unsafe fn AddDrawList(&mut self, draw_list: *mut ImDrawList) {
        ImDrawData_AddDrawList(self, draw_list)
    }
    #[inline]
    pub unsafe fn DeIndexAllBuffers(&mut self) {
        ImDrawData_DeIndexAllBuffers(self)
    }
    #[inline]
    pub unsafe fn ScaleClipRects(&mut self, fb_scale: *const ImVec2) {
        ImDrawData_ScaleClipRects(self, fb_scale)
    }
}
pub const ImTextureFormat_ImTextureFormat_RGBA32: ImTextureFormat = 0;
pub const ImTextureFormat_ImTextureFormat_Alpha8: ImTextureFormat = 1;
pub type ImTextureFormat = ::std::os::raw::c_uint;
pub const ImTextureStatus_ImTextureStatus_OK: ImTextureStatus = 0;
pub const ImTextureStatus_ImTextureStatus_Destroyed: ImTextureStatus = 1;
pub const ImTextureStatus_ImTextureStatus_WantCreate: ImTextureStatus = 2;
pub const ImTextureStatus_ImTextureStatus_WantUpdates: ImTextureStatus = 3;
pub const ImTextureStatus_ImTextureStatus_WantDestroy: ImTextureStatus = 4;
pub type ImTextureStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImTextureRect {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImTextureRect"][::std::mem::size_of::<ImTextureRect>() - 8usize];
    ["Alignment of ImTextureRect"][::std::mem::align_of::<ImTextureRect>() - 2usize];
    ["Offset of field: ImTextureRect::x"][::std::mem::offset_of!(ImTextureRect, x) - 0usize];
    ["Offset of field: ImTextureRect::y"][::std::mem::offset_of!(ImTextureRect, y) - 2usize];
    ["Offset of field: ImTextureRect::w"][::std::mem::offset_of!(ImTextureRect, w) - 4usize];
    ["Offset of field: ImTextureRect::h"][::std::mem::offset_of!(ImTextureRect, h) - 6usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImTextureData {
    pub UniqueID: ::std::os::raw::c_int,
    pub Status: ImTextureStatus,
    pub BackendUserData: *mut ::std::os::raw::c_void,
    pub TexID: ImTextureID,
    pub Format: ImTextureFormat,
    pub Width: ::std::os::raw::c_int,
    pub Height: ::std::os::raw::c_int,
    pub BytesPerPixel: ::std::os::raw::c_int,
    pub Pixels: *mut ::std::os::raw::c_uchar,
    pub UsedRect: ImTextureRect,
    pub UpdateRect: ImTextureRect,
    pub Updates: ImVector<ImTextureRect>,
    pub UnusedFrames: ::std::os::raw::c_int,
    pub RefCount: ::std::os::raw::c_ushort,
    pub UseColors: bool,
    pub WantDestroyNextFrame: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImTextureData"][::std::mem::size_of::<ImTextureData>() - 88usize];
    ["Alignment of ImTextureData"][::std::mem::align_of::<ImTextureData>() - 8usize];
    ["Offset of field: ImTextureData::UniqueID"]
        [::std::mem::offset_of!(ImTextureData, UniqueID) - 0usize];
    ["Offset of field: ImTextureData::Status"]
        [::std::mem::offset_of!(ImTextureData, Status) - 4usize];
    ["Offset of field: ImTextureData::BackendUserData"]
        [::std::mem::offset_of!(ImTextureData, BackendUserData) - 8usize];
    ["Offset of field: ImTextureData::TexID"]
        [::std::mem::offset_of!(ImTextureData, TexID) - 16usize];
    ["Offset of field: ImTextureData::Format"]
        [::std::mem::offset_of!(ImTextureData, Format) - 24usize];
    ["Offset of field: ImTextureData::Width"]
        [::std::mem::offset_of!(ImTextureData, Width) - 28usize];
    ["Offset of field: ImTextureData::Height"]
        [::std::mem::offset_of!(ImTextureData, Height) - 32usize];
    ["Offset of field: ImTextureData::BytesPerPixel"]
        [::std::mem::offset_of!(ImTextureData, BytesPerPixel) - 36usize];
    ["Offset of field: ImTextureData::Pixels"]
        [::std::mem::offset_of!(ImTextureData, Pixels) - 40usize];
    ["Offset of field: ImTextureData::UsedRect"]
        [::std::mem::offset_of!(ImTextureData, UsedRect) - 48usize];
    ["Offset of field: ImTextureData::UpdateRect"]
        [::std::mem::offset_of!(ImTextureData, UpdateRect) - 56usize];
    ["Offset of field: ImTextureData::Updates"]
        [::std::mem::offset_of!(ImTextureData, Updates) - 64usize];
    ["Offset of field: ImTextureData::UnusedFrames"]
        [::std::mem::offset_of!(ImTextureData, UnusedFrames) - 80usize];
    ["Offset of field: ImTextureData::RefCount"]
        [::std::mem::offset_of!(ImTextureData, RefCount) - 84usize];
    ["Offset of field: ImTextureData::UseColors"]
        [::std::mem::offset_of!(ImTextureData, UseColors) - 86usize];
    ["Offset of field: ImTextureData::WantDestroyNextFrame"]
        [::std::mem::offset_of!(ImTextureData, WantDestroyNextFrame) - 87usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN13ImTextureData6CreateE15ImTextureFormatii"]
    pub fn ImTextureData_Create(
        this: *mut ImTextureData,
        format: ImTextureFormat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN13ImTextureData13DestroyPixelsEv"]
    pub fn ImTextureData_DestroyPixels(this: *mut ImTextureData);
}
impl ImTextureData {
    #[inline]
    pub unsafe fn Create(
        &mut self,
        format: ImTextureFormat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        ImTextureData_Create(self, format, w, h)
    }
    #[inline]
    pub unsafe fn DestroyPixels(&mut self) {
        ImTextureData_DestroyPixels(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig {
    pub Name: [::std::os::raw::c_char; 40usize],
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub MergeMode: bool,
    pub PixelSnapH: bool,
    pub PixelSnapV: bool,
    pub FontNo: ImS8,
    pub OversampleH: ImS8,
    pub OversampleV: ImS8,
    pub SizePixels: f32,
    pub GlyphRanges: *const ImWchar,
    pub GlyphExcludeRanges: *const ImWchar,
    pub GlyphOffset: ImVec2,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub GlyphExtraAdvanceX: f32,
    pub FontLoaderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub EllipsisChar: ImWchar,
    pub Flags: ImFontFlags,
    pub DstFont: *mut ImFont,
    pub FontLoader: *const ImFontLoader,
    pub FontLoaderData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontConfig"][::std::mem::size_of::<ImFontConfig>() - 144usize];
    ["Alignment of ImFontConfig"][::std::mem::align_of::<ImFontConfig>() - 8usize];
    ["Offset of field: ImFontConfig::Name"][::std::mem::offset_of!(ImFontConfig, Name) - 0usize];
    ["Offset of field: ImFontConfig::FontData"]
        [::std::mem::offset_of!(ImFontConfig, FontData) - 40usize];
    ["Offset of field: ImFontConfig::FontDataSize"]
        [::std::mem::offset_of!(ImFontConfig, FontDataSize) - 48usize];
    ["Offset of field: ImFontConfig::FontDataOwnedByAtlas"]
        [::std::mem::offset_of!(ImFontConfig, FontDataOwnedByAtlas) - 52usize];
    ["Offset of field: ImFontConfig::MergeMode"]
        [::std::mem::offset_of!(ImFontConfig, MergeMode) - 53usize];
    ["Offset of field: ImFontConfig::PixelSnapH"]
        [::std::mem::offset_of!(ImFontConfig, PixelSnapH) - 54usize];
    ["Offset of field: ImFontConfig::PixelSnapV"]
        [::std::mem::offset_of!(ImFontConfig, PixelSnapV) - 55usize];
    ["Offset of field: ImFontConfig::FontNo"]
        [::std::mem::offset_of!(ImFontConfig, FontNo) - 56usize];
    ["Offset of field: ImFontConfig::OversampleH"]
        [::std::mem::offset_of!(ImFontConfig, OversampleH) - 57usize];
    ["Offset of field: ImFontConfig::OversampleV"]
        [::std::mem::offset_of!(ImFontConfig, OversampleV) - 58usize];
    ["Offset of field: ImFontConfig::SizePixels"]
        [::std::mem::offset_of!(ImFontConfig, SizePixels) - 60usize];
    ["Offset of field: ImFontConfig::GlyphRanges"]
        [::std::mem::offset_of!(ImFontConfig, GlyphRanges) - 64usize];
    ["Offset of field: ImFontConfig::GlyphExcludeRanges"]
        [::std::mem::offset_of!(ImFontConfig, GlyphExcludeRanges) - 72usize];
    ["Offset of field: ImFontConfig::GlyphOffset"]
        [::std::mem::offset_of!(ImFontConfig, GlyphOffset) - 80usize];
    ["Offset of field: ImFontConfig::GlyphMinAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphMinAdvanceX) - 88usize];
    ["Offset of field: ImFontConfig::GlyphMaxAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphMaxAdvanceX) - 92usize];
    ["Offset of field: ImFontConfig::GlyphExtraAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphExtraAdvanceX) - 96usize];
    ["Offset of field: ImFontConfig::FontLoaderFlags"]
        [::std::mem::offset_of!(ImFontConfig, FontLoaderFlags) - 100usize];
    ["Offset of field: ImFontConfig::RasterizerMultiply"]
        [::std::mem::offset_of!(ImFontConfig, RasterizerMultiply) - 104usize];
    ["Offset of field: ImFontConfig::RasterizerDensity"]
        [::std::mem::offset_of!(ImFontConfig, RasterizerDensity) - 108usize];
    ["Offset of field: ImFontConfig::EllipsisChar"]
        [::std::mem::offset_of!(ImFontConfig, EllipsisChar) - 112usize];
    ["Offset of field: ImFontConfig::Flags"]
        [::std::mem::offset_of!(ImFontConfig, Flags) - 116usize];
    ["Offset of field: ImFontConfig::DstFont"]
        [::std::mem::offset_of!(ImFontConfig, DstFont) - 120usize];
    ["Offset of field: ImFontConfig::FontLoader"]
        [::std::mem::offset_of!(ImFontConfig, FontLoader) - 128usize];
    ["Offset of field: ImFontConfig::FontLoaderData"]
        [::std::mem::offset_of!(ImFontConfig, FontLoaderData) - 136usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN12ImFontConfigC1Ev"]
    pub fn ImFontConfig_ImFontConfig(this: *mut ImFontConfig);
}
impl ImFontConfig {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontConfig_ImFontConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
    pub PackId: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontGlyph"][::std::mem::size_of::<ImFontGlyph>() - 44usize];
    ["Alignment of ImFontGlyph"][::std::mem::align_of::<ImFontGlyph>() - 4usize];
    ["Offset of field: ImFontGlyph::AdvanceX"]
        [::std::mem::offset_of!(ImFontGlyph, AdvanceX) - 4usize];
    ["Offset of field: ImFontGlyph::X0"][::std::mem::offset_of!(ImFontGlyph, X0) - 8usize];
    ["Offset of field: ImFontGlyph::Y0"][::std::mem::offset_of!(ImFontGlyph, Y0) - 12usize];
    ["Offset of field: ImFontGlyph::X1"][::std::mem::offset_of!(ImFontGlyph, X1) - 16usize];
    ["Offset of field: ImFontGlyph::Y1"][::std::mem::offset_of!(ImFontGlyph, Y1) - 20usize];
    ["Offset of field: ImFontGlyph::U0"][::std::mem::offset_of!(ImFontGlyph, U0) - 24usize];
    ["Offset of field: ImFontGlyph::V0"][::std::mem::offset_of!(ImFontGlyph, V0) - 28usize];
    ["Offset of field: ImFontGlyph::U1"][::std::mem::offset_of!(ImFontGlyph, U1) - 32usize];
    ["Offset of field: ImFontGlyph::V1"][::std::mem::offset_of!(ImFontGlyph, V1) - 36usize];
    ["Offset of field: ImFontGlyph::PackId"][::std::mem::offset_of!(ImFontGlyph, PackId) - 40usize];
};
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Colored_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Colored_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Visible_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Visible_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SourceIdx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_SourceIdx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SourceIdx_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SourceIdx_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Codepoint_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Codepoint_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        SourceIdx: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let SourceIdx: u32 = unsafe { ::std::mem::transmute(SourceIdx) };
            SourceIdx as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector<ImU32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontGlyphRangesBuilder"]
        [::std::mem::size_of::<ImFontGlyphRangesBuilder>() - 16usize];
    ["Alignment of ImFontGlyphRangesBuilder"]
        [::std::mem::align_of::<ImFontGlyphRangesBuilder>() - 8usize];
    ["Offset of field: ImFontGlyphRangesBuilder::UsedChars"]
        [::std::mem::offset_of!(ImFontGlyphRangesBuilder, UsedChars) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder7AddTextEPKcS1_"]
    pub fn ImFontGlyphRangesBuilder_AddText(
        this: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder9AddRangesEPKt"]
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        this: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder11BuildRangesEP8ImVectorItE"]
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        this: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector<ImWchar>,
    );
}
impl ImFontGlyphRangesBuilder {
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImFontGlyphRangesBuilder_AddText(self, text, text_end)
    }
    #[inline]
    pub unsafe fn AddRanges(&mut self, ranges: *const ImWchar) {
        ImFontGlyphRangesBuilder_AddRanges(self, ranges)
    }
    #[inline]
    pub unsafe fn BuildRanges(&mut self, out_ranges: *mut ImVector<ImWchar>) {
        ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)
    }
}
pub type ImFontAtlasRectId = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasRect {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub uv0: ImVec2,
    pub uv1: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlasRect"][::std::mem::size_of::<ImFontAtlasRect>() - 24usize];
    ["Alignment of ImFontAtlasRect"][::std::mem::align_of::<ImFontAtlasRect>() - 4usize];
    ["Offset of field: ImFontAtlasRect::x"][::std::mem::offset_of!(ImFontAtlasRect, x) - 0usize];
    ["Offset of field: ImFontAtlasRect::y"][::std::mem::offset_of!(ImFontAtlasRect, y) - 2usize];
    ["Offset of field: ImFontAtlasRect::w"][::std::mem::offset_of!(ImFontAtlasRect, w) - 4usize];
    ["Offset of field: ImFontAtlasRect::h"][::std::mem::offset_of!(ImFontAtlasRect, h) - 6usize];
    ["Offset of field: ImFontAtlasRect::uv0"]
        [::std::mem::offset_of!(ImFontAtlasRect, uv0) - 8usize];
    ["Offset of field: ImFontAtlasRect::uv1"]
        [::std::mem::offset_of!(ImFontAtlasRect, uv1) - 16usize];
};
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexDesiredFormat: ImTextureFormat,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub TexMinWidth: ::std::os::raw::c_int,
    pub TexMinHeight: ::std::os::raw::c_int,
    pub TexMaxWidth: ::std::os::raw::c_int,
    pub TexMaxHeight: ::std::os::raw::c_int,
    pub UserData: *mut ::std::os::raw::c_void,
    pub __bindgen_anon_1: ImFontAtlas__bindgen_ty_1,
    pub TexData: *mut ImTextureData,
    pub TexList: ImVector<*mut ImTextureData>,
    pub Locked: bool,
    pub RendererHasTextures: bool,
    pub TexIsBuilt: bool,
    pub TexPixelsUseColors: bool,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector<*mut ImFont>,
    pub Sources: ImVector<ImFontConfig>,
    pub TexUvLines: [ImVec4; 33usize],
    pub TexNextUniqueID: ::std::os::raw::c_int,
    pub FontNextUniqueID: ::std::os::raw::c_int,
    pub DrawListSharedDatas: ImVector<*mut ImDrawListSharedData>,
    pub Builder: *mut ImFontAtlasBuilder,
    pub FontLoader: *const ImFontLoader,
    pub FontLoaderName: *const ::std::os::raw::c_char,
    pub FontLoaderData: *mut ::std::os::raw::c_void,
    pub FontLoaderFlags: ::std::os::raw::c_uint,
    pub RefCount: ::std::os::raw::c_int,
    pub OwnerContext: *mut ImGuiContext,
    pub TempRect: ImFontAtlasRect,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImFontAtlas__bindgen_ty_1 {
    pub TexRef: ImTextureRef,
    pub TexID: ImTextureRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlas__bindgen_ty_1"]
        [::std::mem::size_of::<ImFontAtlas__bindgen_ty_1>() - 16usize];
    ["Alignment of ImFontAtlas__bindgen_ty_1"]
        [::std::mem::align_of::<ImFontAtlas__bindgen_ty_1>() - 8usize];
    ["Offset of field: ImFontAtlas__bindgen_ty_1::TexRef"]
        [::std::mem::offset_of!(ImFontAtlas__bindgen_ty_1, TexRef) - 0usize];
    ["Offset of field: ImFontAtlas__bindgen_ty_1::TexID"]
        [::std::mem::offset_of!(ImFontAtlas__bindgen_ty_1, TexID) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlas"][::std::mem::size_of::<ImFontAtlas>() - 760usize];
    ["Alignment of ImFontAtlas"][::std::mem::align_of::<ImFontAtlas>() - 8usize];
    ["Offset of field: ImFontAtlas::Flags"][::std::mem::offset_of!(ImFontAtlas, Flags) - 0usize];
    ["Offset of field: ImFontAtlas::TexDesiredFormat"]
        [::std::mem::offset_of!(ImFontAtlas, TexDesiredFormat) - 4usize];
    ["Offset of field: ImFontAtlas::TexGlyphPadding"]
        [::std::mem::offset_of!(ImFontAtlas, TexGlyphPadding) - 8usize];
    ["Offset of field: ImFontAtlas::TexMinWidth"]
        [::std::mem::offset_of!(ImFontAtlas, TexMinWidth) - 12usize];
    ["Offset of field: ImFontAtlas::TexMinHeight"]
        [::std::mem::offset_of!(ImFontAtlas, TexMinHeight) - 16usize];
    ["Offset of field: ImFontAtlas::TexMaxWidth"]
        [::std::mem::offset_of!(ImFontAtlas, TexMaxWidth) - 20usize];
    ["Offset of field: ImFontAtlas::TexMaxHeight"]
        [::std::mem::offset_of!(ImFontAtlas, TexMaxHeight) - 24usize];
    ["Offset of field: ImFontAtlas::UserData"]
        [::std::mem::offset_of!(ImFontAtlas, UserData) - 32usize];
    ["Offset of field: ImFontAtlas::TexData"]
        [::std::mem::offset_of!(ImFontAtlas, TexData) - 56usize];
    ["Offset of field: ImFontAtlas::TexList"]
        [::std::mem::offset_of!(ImFontAtlas, TexList) - 64usize];
    ["Offset of field: ImFontAtlas::Locked"][::std::mem::offset_of!(ImFontAtlas, Locked) - 80usize];
    ["Offset of field: ImFontAtlas::RendererHasTextures"]
        [::std::mem::offset_of!(ImFontAtlas, RendererHasTextures) - 81usize];
    ["Offset of field: ImFontAtlas::TexIsBuilt"]
        [::std::mem::offset_of!(ImFontAtlas, TexIsBuilt) - 82usize];
    ["Offset of field: ImFontAtlas::TexPixelsUseColors"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsUseColors) - 83usize];
    ["Offset of field: ImFontAtlas::TexUvScale"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvScale) - 84usize];
    ["Offset of field: ImFontAtlas::TexUvWhitePixel"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvWhitePixel) - 92usize];
    ["Offset of field: ImFontAtlas::Fonts"][::std::mem::offset_of!(ImFontAtlas, Fonts) - 104usize];
    ["Offset of field: ImFontAtlas::Sources"]
        [::std::mem::offset_of!(ImFontAtlas, Sources) - 120usize];
    ["Offset of field: ImFontAtlas::TexUvLines"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvLines) - 136usize];
    ["Offset of field: ImFontAtlas::TexNextUniqueID"]
        [::std::mem::offset_of!(ImFontAtlas, TexNextUniqueID) - 664usize];
    ["Offset of field: ImFontAtlas::FontNextUniqueID"]
        [::std::mem::offset_of!(ImFontAtlas, FontNextUniqueID) - 668usize];
    ["Offset of field: ImFontAtlas::DrawListSharedDatas"]
        [::std::mem::offset_of!(ImFontAtlas, DrawListSharedDatas) - 672usize];
    ["Offset of field: ImFontAtlas::Builder"]
        [::std::mem::offset_of!(ImFontAtlas, Builder) - 688usize];
    ["Offset of field: ImFontAtlas::FontLoader"]
        [::std::mem::offset_of!(ImFontAtlas, FontLoader) - 696usize];
    ["Offset of field: ImFontAtlas::FontLoaderName"]
        [::std::mem::offset_of!(ImFontAtlas, FontLoaderName) - 704usize];
    ["Offset of field: ImFontAtlas::FontLoaderData"]
        [::std::mem::offset_of!(ImFontAtlas, FontLoaderData) - 712usize];
    ["Offset of field: ImFontAtlas::FontLoaderFlags"]
        [::std::mem::offset_of!(ImFontAtlas, FontLoaderFlags) - 720usize];
    ["Offset of field: ImFontAtlas::RefCount"]
        [::std::mem::offset_of!(ImFontAtlas, RefCount) - 724usize];
    ["Offset of field: ImFontAtlas::OwnerContext"]
        [::std::mem::offset_of!(ImFontAtlas, OwnerContext) - 728usize];
    ["Offset of field: ImFontAtlas::TempRect"]
        [::std::mem::offset_of!(ImFontAtlas, TempRect) - 736usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas7AddFontEPK12ImFontConfig"]
    pub fn ImFontAtlas_AddFont(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig"]
    pub fn ImFontAtlas_AddFontDefault(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromFileTTF(
        this: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        this: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        this: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        this: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas10RemoveFontEP6ImFont"]
    pub fn ImFontAtlas_RemoveFont(this: *mut ImFontAtlas, font: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas5ClearEv"]
    pub fn ImFontAtlas_Clear(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas12CompactCacheEv"]
    pub fn ImFontAtlas_CompactCache(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas14ClearInputDataEv"]
    pub fn ImFontAtlas_ClearInputData(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas10ClearFontsEv"]
    pub fn ImFontAtlas_ClearFonts(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas12ClearTexDataEv"]
    pub fn ImFontAtlas_ClearTexData(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas5BuildEv"]
    pub fn ImFontAtlas_Build(this: *mut ImFontAtlas) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_"]
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_"]
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas21GetGlyphRangesDefaultEv"]
    pub fn ImFontAtlas_GetGlyphRangesDefault(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas19GetGlyphRangesGreekEv"]
    pub fn ImFontAtlas_GetGlyphRangesGreek(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas20GetGlyphRangesKoreanEv"]
    pub fn ImFontAtlas_GetGlyphRangesKorean(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas22GetGlyphRangesJapaneseEv"]
    pub fn ImFontAtlas_GetGlyphRangesJapanese(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas25GetGlyphRangesChineseFullEv"]
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv"]
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        this: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas22GetGlyphRangesCyrillicEv"]
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas18GetGlyphRangesThaiEv"]
    pub fn ImFontAtlas_GetGlyphRangesThai(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas24GetGlyphRangesVietnameseEv"]
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas13AddCustomRectEiiP15ImFontAtlasRect"]
    pub fn ImFontAtlas_AddCustomRect(
        this: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        out_r: *mut ImFontAtlasRect,
    ) -> ImFontAtlasRectId;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas16RemoveCustomRectEi"]
    pub fn ImFontAtlas_RemoveCustomRect(this: *mut ImFontAtlas, id: ImFontAtlasRectId);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK11ImFontAtlas13GetCustomRectEiP15ImFontAtlasRect"]
    pub fn ImFontAtlas_GetCustomRect(
        this: *const ImFontAtlas,
        id: ImFontAtlasRectId,
        out_r: *mut ImFontAtlasRect,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2"]
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        this: *mut ImFontAtlas,
        font: *mut ImFont,
        codepoint: ImWchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ImFontAtlasRectId;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlas29AddCustomRectFontGlyphForSizeEP6ImFontftiifRK6ImVec2"]
    pub fn ImFontAtlas_AddCustomRectFontGlyphForSize(
        this: *mut ImFontAtlas,
        font: *mut ImFont,
        font_size: f32,
        codepoint: ImWchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ImFontAtlasRectId;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlasC1Ev"]
    pub fn ImFontAtlas_ImFontAtlas(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontAtlasD1Ev"]
    pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut ImFontAtlas);
}
impl ImFontAtlas {
    #[inline]
    pub unsafe fn AddFont(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFont(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontDefault(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFontDefault(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontFromFileTTF(
        &mut self,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryTTF(
        &mut self,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryTTF(
            self,
            font_data,
            font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedTTF(
        &mut self,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self,
            compressed_font_data,
            compressed_font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedBase85TTF(
        &mut self,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            self,
            compressed_font_data_base85,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn RemoveFont(&mut self, font: *mut ImFont) {
        ImFontAtlas_RemoveFont(self, font)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImFontAtlas_Clear(self)
    }
    #[inline]
    pub unsafe fn CompactCache(&mut self) {
        ImFontAtlas_CompactCache(self)
    }
    #[inline]
    pub unsafe fn ClearInputData(&mut self) {
        ImFontAtlas_ClearInputData(self)
    }
    #[inline]
    pub unsafe fn ClearFonts(&mut self) {
        ImFontAtlas_ClearFonts(self)
    }
    #[inline]
    pub unsafe fn ClearTexData(&mut self) {
        ImFontAtlas_ClearTexData(self)
    }
    #[inline]
    pub unsafe fn Build(&mut self) -> bool {
        ImFontAtlas_Build(self)
    }
    #[inline]
    pub unsafe fn GetTexDataAsAlpha8(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsAlpha8(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetTexDataAsRGBA32(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsRGBA32(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesDefault(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesGreek(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesGreek(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesKorean(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesKorean(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesJapanese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesJapanese(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseFull(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseFull(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseSimplifiedCommon(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesCyrillic(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesCyrillic(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesThai(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesThai(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesVietnamese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesVietnamese(self)
    }
    #[inline]
    pub unsafe fn AddCustomRect(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        out_r: *mut ImFontAtlasRect,
    ) -> ImFontAtlasRectId {
        ImFontAtlas_AddCustomRect(self, width, height, out_r)
    }
    #[inline]
    pub unsafe fn RemoveCustomRect(&mut self, id: ImFontAtlasRectId) {
        ImFontAtlas_RemoveCustomRect(self, id)
    }
    #[inline]
    pub unsafe fn GetCustomRect(&self, id: ImFontAtlasRectId, out_r: *mut ImFontAtlasRect) -> bool {
        ImFontAtlas_GetCustomRect(self, id, out_r)
    }
    #[inline]
    pub unsafe fn AddCustomRectFontGlyph(
        &mut self,
        font: *mut ImFont,
        codepoint: ImWchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ImFontAtlasRectId {
        ImFontAtlas_AddCustomRectFontGlyph(self, font, codepoint, w, h, advance_x, offset)
    }
    #[inline]
    pub unsafe fn AddCustomRectFontGlyphForSize(
        &mut self,
        font: *mut ImFont,
        font_size: f32,
        codepoint: ImWchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ImFontAtlasRectId {
        ImFontAtlas_AddCustomRectFontGlyphForSize(
            self, font, font_size, codepoint, w, h, advance_x, offset,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontAtlas_ImFontAtlas(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFontAtlas_ImFontAtlas_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFontBaked {
    pub IndexAdvanceX: ImVector<f32>,
    pub FallbackAdvanceX: f32,
    pub Size: f32,
    pub RasterizerDensity: f32,
    pub IndexLookup: ImVector<ImU16>,
    pub Glyphs: ImVector<ImFontGlyph>,
    pub FallbackGlyphIndex: ::std::os::raw::c_int,
    pub Ascent: f32,
    pub Descent: f32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub LastUsedFrame: ::std::os::raw::c_int,
    pub BakedId: ImGuiID,
    pub ContainerFont: *mut ImFont,
    pub FontLoaderDatas: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontBaked"][::std::mem::size_of::<ImFontBaked>() - 104usize];
    ["Alignment of ImFontBaked"][::std::mem::align_of::<ImFontBaked>() - 8usize];
    ["Offset of field: ImFontBaked::IndexAdvanceX"]
        [::std::mem::offset_of!(ImFontBaked, IndexAdvanceX) - 0usize];
    ["Offset of field: ImFontBaked::FallbackAdvanceX"]
        [::std::mem::offset_of!(ImFontBaked, FallbackAdvanceX) - 16usize];
    ["Offset of field: ImFontBaked::Size"][::std::mem::offset_of!(ImFontBaked, Size) - 20usize];
    ["Offset of field: ImFontBaked::RasterizerDensity"]
        [::std::mem::offset_of!(ImFontBaked, RasterizerDensity) - 24usize];
    ["Offset of field: ImFontBaked::IndexLookup"]
        [::std::mem::offset_of!(ImFontBaked, IndexLookup) - 32usize];
    ["Offset of field: ImFontBaked::Glyphs"][::std::mem::offset_of!(ImFontBaked, Glyphs) - 48usize];
    ["Offset of field: ImFontBaked::FallbackGlyphIndex"]
        [::std::mem::offset_of!(ImFontBaked, FallbackGlyphIndex) - 64usize];
    ["Offset of field: ImFontBaked::Ascent"][::std::mem::offset_of!(ImFontBaked, Ascent) - 68usize];
    ["Offset of field: ImFontBaked::Descent"]
        [::std::mem::offset_of!(ImFontBaked, Descent) - 72usize];
    ["Offset of field: ImFontBaked::LastUsedFrame"]
        [::std::mem::offset_of!(ImFontBaked, LastUsedFrame) - 80usize];
    ["Offset of field: ImFontBaked::BakedId"]
        [::std::mem::offset_of!(ImFontBaked, BakedId) - 84usize];
    ["Offset of field: ImFontBaked::ContainerFont"]
        [::std::mem::offset_of!(ImFontBaked, ContainerFont) - 88usize];
    ["Offset of field: ImFontBaked::FontLoaderDatas"]
        [::std::mem::offset_of!(ImFontBaked, FontLoaderDatas) - 96usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontBaked15ClearOutputDataEv"]
    pub fn ImFontBaked_ClearOutputData(this: *mut ImFontBaked);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontBaked9FindGlyphEt"]
    pub fn ImFontBaked_FindGlyph(this: *mut ImFontBaked, c: ImWchar) -> *mut ImFontGlyph;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontBaked19FindGlyphNoFallbackEt"]
    pub fn ImFontBaked_FindGlyphNoFallback(this: *mut ImFontBaked, c: ImWchar) -> *mut ImFontGlyph;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontBaked14GetCharAdvanceEt"]
    pub fn ImFontBaked_GetCharAdvance(this: *mut ImFontBaked, c: ImWchar) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontBaked13IsGlyphLoadedEt"]
    pub fn ImFontBaked_IsGlyphLoaded(this: *mut ImFontBaked, c: ImWchar) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN11ImFontBakedC1Ev"]
    pub fn ImFontBaked_ImFontBaked(this: *mut ImFontBaked);
}
impl ImFontBaked {
    #[inline]
    pub fn MetricsTotalSurface(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_MetricsTotalSurface(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MetricsTotalSurface_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MetricsTotalSurface_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantDestroy(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WantDestroy(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantDestroy_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_WantDestroy_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LockLoadingFallback(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LockLoadingFallback(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LockLoadingFallback_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LockLoadingFallback_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MetricsTotalSurface: ::std::os::raw::c_uint,
        WantDestroy: ::std::os::raw::c_uint,
        LockLoadingFallback: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let MetricsTotalSurface: u32 = unsafe { ::std::mem::transmute(MetricsTotalSurface) };
            MetricsTotalSurface as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let WantDestroy: u32 = unsafe { ::std::mem::transmute(WantDestroy) };
            WantDestroy as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let LockLoadingFallback: u32 = unsafe { ::std::mem::transmute(LockLoadingFallback) };
            LockLoadingFallback as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFontBaked_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn FindGlyph(&mut self, c: ImWchar) -> *mut ImFontGlyph {
        ImFontBaked_FindGlyph(self, c)
    }
    #[inline]
    pub unsafe fn FindGlyphNoFallback(&mut self, c: ImWchar) -> *mut ImFontGlyph {
        ImFontBaked_FindGlyphNoFallback(self, c)
    }
    #[inline]
    pub unsafe fn GetCharAdvance(&mut self, c: ImWchar) -> f32 {
        ImFontBaked_GetCharAdvance(self, c)
    }
    #[inline]
    pub unsafe fn IsGlyphLoaded(&mut self, c: ImWchar) -> bool {
        ImFontBaked_IsGlyphLoaded(self, c)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontBaked_ImFontBaked(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub const ImFontFlags__ImFontFlags_None: ImFontFlags_ = 0;
pub const ImFontFlags__ImFontFlags_DefaultToLegacySize: ImFontFlags_ = 1;
pub const ImFontFlags__ImFontFlags_NoLoadError: ImFontFlags_ = 2;
pub const ImFontFlags__ImFontFlags_NoLoadGlyphs: ImFontFlags_ = 4;
pub const ImFontFlags__ImFontFlags_LockBakedSizes: ImFontFlags_ = 8;
pub type ImFontFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ImFont {
    pub LastBaked: *mut ImFontBaked,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub Flags: ImFontFlags,
    pub CurrentRasterizerDensity: f32,
    pub FontId: ImGuiID,
    pub LegacySize: f32,
    pub Sources: ImVector<*mut ImFontConfig>,
    pub EllipsisChar: ImWchar,
    pub FallbackChar: ImWchar,
    pub Used8kPagesMap: [ImU8; 1usize],
    pub EllipsisAutoBake: bool,
    pub RemapPairs: ImGuiStorage,
    pub Scale: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFont"][::std::mem::size_of::<ImFont>() - 80usize];
    ["Alignment of ImFont"][::std::mem::align_of::<ImFont>() - 8usize];
    ["Offset of field: ImFont::LastBaked"][::std::mem::offset_of!(ImFont, LastBaked) - 0usize];
    ["Offset of field: ImFont::ContainerAtlas"]
        [::std::mem::offset_of!(ImFont, ContainerAtlas) - 8usize];
    ["Offset of field: ImFont::Flags"][::std::mem::offset_of!(ImFont, Flags) - 16usize];
    ["Offset of field: ImFont::CurrentRasterizerDensity"]
        [::std::mem::offset_of!(ImFont, CurrentRasterizerDensity) - 20usize];
    ["Offset of field: ImFont::FontId"][::std::mem::offset_of!(ImFont, FontId) - 24usize];
    ["Offset of field: ImFont::LegacySize"][::std::mem::offset_of!(ImFont, LegacySize) - 28usize];
    ["Offset of field: ImFont::Sources"][::std::mem::offset_of!(ImFont, Sources) - 32usize];
    ["Offset of field: ImFont::EllipsisChar"]
        [::std::mem::offset_of!(ImFont, EllipsisChar) - 48usize];
    ["Offset of field: ImFont::FallbackChar"]
        [::std::mem::offset_of!(ImFont, FallbackChar) - 50usize];
    ["Offset of field: ImFont::Used8kPagesMap"]
        [::std::mem::offset_of!(ImFont, Used8kPagesMap) - 52usize];
    ["Offset of field: ImFont::EllipsisAutoBake"]
        [::std::mem::offset_of!(ImFont, EllipsisAutoBake) - 53usize];
    ["Offset of field: ImFont::RemapPairs"][::std::mem::offset_of!(ImFont, RemapPairs) - 56usize];
    ["Offset of field: ImFont::Scale"][::std::mem::offset_of!(ImFont, Scale) - 72usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont13IsGlyphInFontEt"]
    pub fn ImFont_IsGlyphInFont(this: *mut ImFont, c: ImWchar) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont12GetFontBakedEff"]
    pub fn ImFont_GetFontBaked(this: *mut ImFont, font_size: f32, density: f32)
    -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont13CalcTextSizeAEfffPKcS1_PS1_"]
    pub fn ImFont_CalcTextSizeA(
        this: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont20CalcWordWrapPositionEfPKcS1_f"]
    pub fn ImFont_CalcWordWrapPosition(
        this: *mut ImFont,
        size: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont10RenderCharEP10ImDrawListfRK6ImVec2jtPK6ImVec4"]
    pub fn ImFont_RenderChar(
        this: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
        cpu_fine_clip: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont10RenderTextEP10ImDrawListfRK6ImVec2jRK6ImVec4PKcS9_fb"]
    pub fn ImFont_RenderText(
        this: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont15ClearOutputDataEv"]
    pub fn ImFont_ClearOutputData(this: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont12AddRemapCharEtt"]
    pub fn ImFont_AddRemapChar(this: *mut ImFont, from_codepoint: ImWchar, to_codepoint: ImWchar);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFont18IsGlyphRangeUnusedEjj"]
    pub fn ImFont_IsGlyphRangeUnused(
        this: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFontC1Ev"]
    pub fn ImFont_ImFont(this: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6ImFontD1Ev"]
    pub fn ImFont_ImFont_destructor(this: *mut ImFont);
}
impl ImFont {
    #[inline]
    pub unsafe fn IsGlyphInFont(&mut self, c: ImWchar) -> bool {
        ImFont_IsGlyphInFont(self, c)
    }
    #[inline]
    pub unsafe fn GetFontBaked(&mut self, font_size: f32, density: f32) -> *mut ImFontBaked {
        ImFont_GetFontBaked(self, font_size, density)
    }
    #[inline]
    pub unsafe fn CalcTextSizeA(
        &mut self,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2 {
        ImFont_CalcTextSizeA(
            self, size, max_width, wrap_width, text_begin, text_end, remaining,
        )
    }
    #[inline]
    pub unsafe fn CalcWordWrapPosition(
        &mut self,
        size: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char {
        ImFont_CalcWordWrapPosition(self, size, text, text_end, wrap_width)
    }
    #[inline]
    pub unsafe fn RenderChar(
        &mut self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
        cpu_fine_clip: *const ImVec4,
    ) {
        ImFont_RenderChar(self, draw_list, size, pos, col, c, cpu_fine_clip)
    }
    #[inline]
    pub unsafe fn RenderText(
        &mut self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    ) {
        ImFont_RenderText(
            self,
            draw_list,
            size,
            pos,
            col,
            clip_rect,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip,
        )
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFont_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn AddRemapChar(&mut self, from_codepoint: ImWchar, to_codepoint: ImWchar) {
        ImFont_AddRemapChar(self, from_codepoint, to_codepoint)
    }
    #[inline]
    pub unsafe fn IsGlyphRangeUnused(
        &mut self,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool {
        ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFont_ImFont(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFont_ImFont_destructor(self)
    }
}
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub FramebufferScale: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiViewport"][::std::mem::size_of::<ImGuiViewport>() - 104usize];
    ["Alignment of ImGuiViewport"][::std::mem::align_of::<ImGuiViewport>() - 8usize];
    ["Offset of field: ImGuiViewport::ID"][::std::mem::offset_of!(ImGuiViewport, ID) - 0usize];
    ["Offset of field: ImGuiViewport::Flags"]
        [::std::mem::offset_of!(ImGuiViewport, Flags) - 4usize];
    ["Offset of field: ImGuiViewport::Pos"][::std::mem::offset_of!(ImGuiViewport, Pos) - 8usize];
    ["Offset of field: ImGuiViewport::Size"][::std::mem::offset_of!(ImGuiViewport, Size) - 16usize];
    ["Offset of field: ImGuiViewport::FramebufferScale"]
        [::std::mem::offset_of!(ImGuiViewport, FramebufferScale) - 24usize];
    ["Offset of field: ImGuiViewport::WorkPos"]
        [::std::mem::offset_of!(ImGuiViewport, WorkPos) - 32usize];
    ["Offset of field: ImGuiViewport::WorkSize"]
        [::std::mem::offset_of!(ImGuiViewport, WorkSize) - 40usize];
    ["Offset of field: ImGuiViewport::DpiScale"]
        [::std::mem::offset_of!(ImGuiViewport, DpiScale) - 48usize];
    ["Offset of field: ImGuiViewport::ParentViewportId"]
        [::std::mem::offset_of!(ImGuiViewport, ParentViewportId) - 52usize];
    ["Offset of field: ImGuiViewport::DrawData"]
        [::std::mem::offset_of!(ImGuiViewport, DrawData) - 56usize];
    ["Offset of field: ImGuiViewport::RendererUserData"]
        [::std::mem::offset_of!(ImGuiViewport, RendererUserData) - 64usize];
    ["Offset of field: ImGuiViewport::PlatformUserData"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformUserData) - 72usize];
    ["Offset of field: ImGuiViewport::PlatformHandle"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformHandle) - 80usize];
    ["Offset of field: ImGuiViewport::PlatformHandleRaw"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformHandleRaw) - 88usize];
    ["Offset of field: ImGuiViewport::PlatformWindowCreated"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformWindowCreated) - 96usize];
    ["Offset of field: ImGuiViewport::PlatformRequestMove"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestMove) - 97usize];
    ["Offset of field: ImGuiViewport::PlatformRequestResize"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestResize) - 98usize];
    ["Offset of field: ImGuiViewport::PlatformRequestClose"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestClose) - 99usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiPlatformIO {
    pub Platform_GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext) -> *const ::std::os::raw::c_char,
    >,
    pub Platform_SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, text: *const ::std::os::raw::c_char),
    >,
    pub Platform_ClipboardUserData: *mut ::std::os::raw::c_void,
    pub Platform_OpenInShellFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub Platform_OpenInShellUserData: *mut ::std::os::raw::c_void,
    pub Platform_SetImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            viewport: *mut ImGuiViewport,
            data: *mut ImGuiPlatformImeData,
        ),
    >,
    pub Platform_ImeUserData: *mut ::std::os::raw::c_void,
    pub Platform_LocaleDecimalPoint: ImWchar,
    pub Renderer_TextureMaxWidth: ::std::os::raw::c_int,
    pub Renderer_TextureMaxHeight: ::std::os::raw::c_int,
    pub Renderer_RenderState: *mut ::std::os::raw::c_void,
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_GetWindowFramebufferScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowWorkAreaInsets:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec4>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector<ImGuiPlatformMonitor>,
    pub Textures: ImVector<*mut ImTextureData>,
    pub Viewports: ImVector<*mut ImGuiViewport>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformIO"][::std::mem::size_of::<ImGuiPlatformIO>() - 328usize];
    ["Alignment of ImGuiPlatformIO"][::std::mem::align_of::<ImGuiPlatformIO>() - 8usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetClipboardTextFn) - 0usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetClipboardTextFn) - 8usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ClipboardUserData"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ClipboardUserData) - 16usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OpenInShellFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OpenInShellFn) - 24usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OpenInShellUserData"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OpenInShellUserData) - 32usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetImeDataFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetImeDataFn) - 40usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ImeUserData"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ImeUserData) - 48usize];
    ["Offset of field: ImGuiPlatformIO::Platform_LocaleDecimalPoint"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_LocaleDecimalPoint) - 56usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_TextureMaxWidth"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_TextureMaxWidth) - 60usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_TextureMaxHeight"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_TextureMaxHeight) - 64usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_RenderState"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_RenderState) - 72usize];
    ["Offset of field: ImGuiPlatformIO::Platform_CreateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_CreateWindow) - 80usize];
    ["Offset of field: ImGuiPlatformIO::Platform_DestroyWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_DestroyWindow) - 88usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ShowWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ShowWindow) - 96usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowPos"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowPos) - 104usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowPos"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowPos) - 112usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowSize) - 120usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowSize) - 128usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowFramebufferScale"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowFramebufferScale) - 136usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowFocus"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowFocus) - 144usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowFocus"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowFocus) - 152usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowMinimized"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowMinimized) - 160usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowTitle"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowTitle) - 168usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowAlpha"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowAlpha) - 176usize];
    ["Offset of field: ImGuiPlatformIO::Platform_UpdateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_UpdateWindow) - 184usize];
    ["Offset of field: ImGuiPlatformIO::Platform_RenderWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_RenderWindow) - 192usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SwapBuffers"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SwapBuffers) - 200usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowDpiScale"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowDpiScale) - 208usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OnChangedViewport"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OnChangedViewport) - 216usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowWorkAreaInsets) - 224usize];
    ["Offset of field: ImGuiPlatformIO::Platform_CreateVkSurface"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_CreateVkSurface) - 232usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_CreateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_CreateWindow) - 240usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_DestroyWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_DestroyWindow) - 248usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_SetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_SetWindowSize) - 256usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_RenderWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_RenderWindow) - 264usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_SwapBuffers"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_SwapBuffers) - 272usize];
    ["Offset of field: ImGuiPlatformIO::Monitors"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Monitors) - 280usize];
    ["Offset of field: ImGuiPlatformIO::Textures"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Textures) - 296usize];
    ["Offset of field: ImGuiPlatformIO::Viewports"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Viewports) - 312usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN15ImGuiPlatformIOC1Ev"]
    pub fn ImGuiPlatformIO_ImGuiPlatformIO(this: *mut ImGuiPlatformIO);
}
impl ImGuiPlatformIO {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiPlatformIO_ImGuiPlatformIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformMonitor"][::std::mem::size_of::<ImGuiPlatformMonitor>() - 48usize];
    ["Alignment of ImGuiPlatformMonitor"][::std::mem::align_of::<ImGuiPlatformMonitor>() - 8usize];
    ["Offset of field: ImGuiPlatformMonitor::MainPos"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, MainPos) - 0usize];
    ["Offset of field: ImGuiPlatformMonitor::MainSize"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, MainSize) - 8usize];
    ["Offset of field: ImGuiPlatformMonitor::WorkPos"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, WorkPos) - 16usize];
    ["Offset of field: ImGuiPlatformMonitor::WorkSize"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, WorkSize) - 24usize];
    ["Offset of field: ImGuiPlatformMonitor::DpiScale"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, DpiScale) - 32usize];
    ["Offset of field: ImGuiPlatformMonitor::PlatformHandle"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, PlatformHandle) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub WantTextInput: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
    pub ViewportId: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformImeData"][::std::mem::size_of::<ImGuiPlatformImeData>() - 20usize];
    ["Alignment of ImGuiPlatformImeData"][::std::mem::align_of::<ImGuiPlatformImeData>() - 4usize];
    ["Offset of field: ImGuiPlatformImeData::WantVisible"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, WantVisible) - 0usize];
    ["Offset of field: ImGuiPlatformImeData::WantTextInput"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, WantTextInput) - 1usize];
    ["Offset of field: ImGuiPlatformImeData::InputPos"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, InputPos) - 4usize];
    ["Offset of field: ImGuiPlatformImeData::InputLineHeight"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, InputLineHeight) - 12usize];
    ["Offset of field: ImGuiPlatformImeData::ViewportId"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, ViewportId) - 16usize];
};
pub type ImFontAtlasCustomRect = ImFontAtlasRect;
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::size_of::<ImVector<ImWchar>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::align_of::<ImVector<ImWchar>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiStoragePair_close0"]
        [::std::mem::size_of::<ImVector<ImGuiStoragePair>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiStoragePair_close0"]
        [::std::mem::align_of::<ImVector<ImGuiStoragePair>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiSelectionRequest_close0"]
        [::std::mem::size_of::<ImVector<ImGuiSelectionRequest>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiSelectionRequest_close0"]
        [::std::mem::align_of::<ImVector<ImGuiSelectionRequest>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::size_of::<ImVector<ImDrawCmd>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::align_of::<ImVector<ImDrawCmd>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::size_of::<ImVector<ImDrawIdx>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::align_of::<ImVector<ImDrawIdx>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawChannel_close0"]
        [::std::mem::size_of::<ImVector<ImDrawChannel>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawChannel_close0"]
        [::std::mem::align_of::<ImVector<ImDrawChannel>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::size_of::<ImVector<ImDrawCmd>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::align_of::<ImVector<ImDrawCmd>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::size_of::<ImVector<ImDrawIdx>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::align_of::<ImVector<ImDrawIdx>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawVert_close0"]
        [::std::mem::size_of::<ImVector<ImDrawVert>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawVert_close0"]
        [::std::mem::align_of::<ImVector<ImDrawVert>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImVec2_close0"]
        [::std::mem::size_of::<ImVector<ImVec2>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImVec2_close0"]
        [::std::mem::align_of::<ImVector<ImVec2>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImVec4_close0"]
        [::std::mem::size_of::<ImVector<ImVec4>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImVec4_close0"]
        [::std::mem::align_of::<ImVector<ImVec4>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImTextureRef_close0"]
        [::std::mem::size_of::<ImVector<ImTextureRef>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImTextureRef_close0"]
        [::std::mem::align_of::<ImVector<ImTextureRef>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU8_close0"]
        [::std::mem::size_of::<ImVector<ImU8>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU8_close0"]
        [::std::mem::align_of::<ImVector<ImU8>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::size_of::<ImVector<*mut ImDrawList>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::align_of::<ImVector<*mut ImDrawList>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImTextureData_close0"]
        [::std::mem::size_of::<ImVector<*mut ImTextureData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImTextureData_close0"]
        [::std::mem::align_of::<ImVector<*mut ImTextureData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImTextureRect_close0"]
        [::std::mem::size_of::<ImVector<ImTextureRect>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImTextureRect_close0"]
        [::std::mem::align_of::<ImVector<ImTextureRect>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU32_close0"]
        [::std::mem::size_of::<ImVector<ImU32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU32_close0"]
        [::std::mem::align_of::<ImVector<ImU32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::size_of::<ImVector<ImWchar>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::align_of::<ImVector<ImWchar>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImTextureData_close0"]
        [::std::mem::size_of::<ImVector<*mut ImTextureData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImTextureData_close0"]
        [::std::mem::align_of::<ImVector<*mut ImTextureData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImFont_close0"]
        [::std::mem::size_of::<ImVector<*mut ImFont>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImFont_close0"]
        [::std::mem::align_of::<ImVector<*mut ImFont>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImFontConfig_close0"]
        [::std::mem::size_of::<ImVector<ImFontConfig>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImFontConfig_close0"]
        [::std::mem::align_of::<ImVector<ImFontConfig>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImDrawListSharedData_close0"]
        [::std::mem::size_of::<ImVector<*mut ImDrawListSharedData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImDrawListSharedData_close0"]
        [::std::mem::align_of::<ImVector<*mut ImDrawListSharedData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_float_close0"]
        [::std::mem::size_of::<ImVector<f32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_float_close0"]
        [::std::mem::align_of::<ImVector<f32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU16_close0"]
        [::std::mem::size_of::<ImVector<ImU16>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU16_close0"]
        [::std::mem::align_of::<ImVector<ImU16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImFontGlyph_close0"]
        [::std::mem::size_of::<ImVector<ImFontGlyph>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImFontGlyph_close0"]
        [::std::mem::align_of::<ImVector<ImFontGlyph>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImFontConfig_close0"]
        [::std::mem::size_of::<ImVector<*mut ImFontConfig>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImFontConfig_close0"]
        [::std::mem::align_of::<ImVector<*mut ImFontConfig>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiPlatformMonitor_close0"]
        [::std::mem::size_of::<ImVector<ImGuiPlatformMonitor>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiPlatformMonitor_close0"]
        [::std::mem::align_of::<ImVector<ImGuiPlatformMonitor>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImTextureData_close0"]
        [::std::mem::size_of::<ImVector<*mut ImTextureData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImTextureData_close0"]
        [::std::mem::align_of::<ImVector<*mut ImTextureData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiViewport_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiViewport>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiViewport_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiViewport>>() - 8usize];
};
